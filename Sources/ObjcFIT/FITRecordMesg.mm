/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2022 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.94Release
// Tag = production/akw/21.94.00-0-g0f668193
/////////////////////////////////////////////////////////////////////////////////////////////


#import "FITMessage+Internal.h"


#import "FITRecordMesg.h"

@implementation FITRecordMesg

- (instancetype)init {
    self = [super initWithFitMesgIndex:fit::Profile::MESG_RECORD];

    return self;
}

// Timestamp 
- (BOOL)isTimestampValid {
	const fit::Field* field = [super getField:253];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITDate *)getTimestamp {
    return FITDateFromTimestamp([super getFieldUINT32ValueForField:253 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTimestamp:(FITDate *)timestamp {
    [super setFieldUINT32ValueForField:253 andValue:TimestampFromFITDate(timestamp) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// PositionLat 
- (BOOL)isPositionLatValid {
	const fit::Field* field = [super getField:0];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt32)getPositionLat {
    return ([super getFieldSINT32ValueForField:0 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setPositionLat:(FITSInt32)positionLat {
    [super setFieldSINT32ValueForField:0 andValue:(positionLat) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// PositionLong 
- (BOOL)isPositionLongValid {
	const fit::Field* field = [super getField:1];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt32)getPositionLong {
    return ([super getFieldSINT32ValueForField:1 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setPositionLong:(FITSInt32)positionLong {
    [super setFieldSINT32ValueForField:1 andValue:(positionLong) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Altitude 
- (BOOL)isAltitudeValid {
	const fit::Field* field = [super getField:2];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAltitude {
    return ([super getFieldFLOAT32ValueForField:2 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAltitude:(FITFloat32)altitude {
    [super setFieldFLOAT32ValueForField:2 andValue:(altitude) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// HeartRate 
- (BOOL)isHeartRateValid {
	const fit::Field* field = [super getField:3];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getHeartRate {
    return ([super getFieldUINT8ValueForField:3 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setHeartRate:(FITUInt8)heartRate {
    [super setFieldUINT8ValueForField:3 andValue:(heartRate) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Cadence 
- (BOOL)isCadenceValid {
	const fit::Field* field = [super getField:4];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getCadence {
    return ([super getFieldUINT8ValueForField:4 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCadence:(FITUInt8)cadence {
    [super setFieldUINT8ValueForField:4 andValue:(cadence) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Distance 
- (BOOL)isDistanceValid {
	const fit::Field* field = [super getField:5];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getDistance {
    return ([super getFieldFLOAT32ValueForField:5 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setDistance:(FITFloat32)distance {
    [super setFieldFLOAT32ValueForField:5 andValue:(distance) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Speed 
- (BOOL)isSpeedValid {
	const fit::Field* field = [super getField:6];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getSpeed {
    return ([super getFieldFLOAT32ValueForField:6 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSpeed:(FITFloat32)speed {
    [super setFieldFLOAT32ValueForField:6 andValue:(speed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Power 
- (BOOL)isPowerValid {
	const fit::Field* field = [super getField:7];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getPower {
    return ([super getFieldUINT16ValueForField:7 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setPower:(FITUInt16)power {
    [super setFieldUINT16ValueForField:7 andValue:(power) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// CompressedSpeedDistance 
- (uint8_t)numCompressedSpeedDistanceValues {
    return [super getFieldNumValuesForField:8 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isCompressedSpeedDistanceValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:8];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITByte)getCompressedSpeedDistanceforIndex:(uint8_t)index {
    return ([super getFieldBYTEValueForField:8 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCompressedSpeedDistance:(FITByte)compressedSpeedDistance forIndex:(uint8_t)index {
    [super setFieldBYTEValueForField:8 andValue:(compressedSpeedDistance) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Grade 
- (BOOL)isGradeValid {
	const fit::Field* field = [super getField:9];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getGrade {
    return ([super getFieldFLOAT32ValueForField:9 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setGrade:(FITFloat32)grade {
    [super setFieldFLOAT32ValueForField:9 andValue:(grade) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Resistance 
- (BOOL)isResistanceValid {
	const fit::Field* field = [super getField:10];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getResistance {
    return ([super getFieldUINT8ValueForField:10 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setResistance:(FITUInt8)resistance {
    [super setFieldUINT8ValueForField:10 andValue:(resistance) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TimeFromCourse 
- (BOOL)isTimeFromCourseValid {
	const fit::Field* field = [super getField:11];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTimeFromCourse {
    return ([super getFieldFLOAT32ValueForField:11 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTimeFromCourse:(FITFloat32)timeFromCourse {
    [super setFieldFLOAT32ValueForField:11 andValue:(timeFromCourse) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// CycleLength 
- (BOOL)isCycleLengthValid {
	const fit::Field* field = [super getField:12];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getCycleLength {
    return ([super getFieldFLOAT32ValueForField:12 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCycleLength:(FITFloat32)cycleLength {
    [super setFieldFLOAT32ValueForField:12 andValue:(cycleLength) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Temperature 
- (BOOL)isTemperatureValid {
	const fit::Field* field = [super getField:13];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt8)getTemperature {
    return ([super getFieldSINT8ValueForField:13 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTemperature:(FITSInt8)temperature {
    [super setFieldSINT8ValueForField:13 andValue:(temperature) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Speed1s 
- (uint8_t)numSpeed1sValues {
    return [super getFieldNumValuesForField:17 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isSpeed1sValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:17];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getSpeed1sforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:17 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSpeed1s:(FITFloat32)speed1s forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:17 andValue:(speed1s) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Cycles 
- (BOOL)isCyclesValid {
	const fit::Field* field = [super getField:18];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getCycles {
    return ([super getFieldUINT8ValueForField:18 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCycles:(FITUInt8)cycles {
    [super setFieldUINT8ValueForField:18 andValue:(cycles) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalCycles 
- (BOOL)isTotalCyclesValid {
	const fit::Field* field = [super getField:19];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getTotalCycles {
    return ([super getFieldUINT32ValueForField:19 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalCycles:(FITUInt32)totalCycles {
    [super setFieldUINT32ValueForField:19 andValue:(totalCycles) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// CompressedAccumulatedPower 
- (BOOL)isCompressedAccumulatedPowerValid {
	const fit::Field* field = [super getField:28];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getCompressedAccumulatedPower {
    return ([super getFieldUINT16ValueForField:28 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCompressedAccumulatedPower:(FITUInt16)compressedAccumulatedPower {
    [super setFieldUINT16ValueForField:28 andValue:(compressedAccumulatedPower) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AccumulatedPower 
- (BOOL)isAccumulatedPowerValid {
	const fit::Field* field = [super getField:29];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getAccumulatedPower {
    return ([super getFieldUINT32ValueForField:29 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAccumulatedPower:(FITUInt32)accumulatedPower {
    [super setFieldUINT32ValueForField:29 andValue:(accumulatedPower) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// LeftRightBalance 
- (BOOL)isLeftRightBalanceValid {
	const fit::Field* field = [super getField:30];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITLeftRightBalance)getLeftRightBalance {
    return ([super getFieldUINT8ValueForField:30 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setLeftRightBalance:(FITLeftRightBalance)leftRightBalance {
    [super setFieldUINT8ValueForField:30 andValue:(leftRightBalance) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// GpsAccuracy 
- (BOOL)isGpsAccuracyValid {
	const fit::Field* field = [super getField:31];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getGpsAccuracy {
    return ([super getFieldUINT8ValueForField:31 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setGpsAccuracy:(FITUInt8)gpsAccuracy {
    [super setFieldUINT8ValueForField:31 andValue:(gpsAccuracy) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// VerticalSpeed 
- (BOOL)isVerticalSpeedValid {
	const fit::Field* field = [super getField:32];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getVerticalSpeed {
    return ([super getFieldFLOAT32ValueForField:32 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setVerticalSpeed:(FITFloat32)verticalSpeed {
    [super setFieldFLOAT32ValueForField:32 andValue:(verticalSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Calories 
- (BOOL)isCaloriesValid {
	const fit::Field* field = [super getField:33];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getCalories {
    return ([super getFieldUINT16ValueForField:33 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCalories:(FITUInt16)calories {
    [super setFieldUINT16ValueForField:33 andValue:(calories) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// VerticalOscillation 
- (BOOL)isVerticalOscillationValid {
	const fit::Field* field = [super getField:39];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getVerticalOscillation {
    return ([super getFieldFLOAT32ValueForField:39 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setVerticalOscillation:(FITFloat32)verticalOscillation {
    [super setFieldFLOAT32ValueForField:39 andValue:(verticalOscillation) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// StanceTimePercent 
- (BOOL)isStanceTimePercentValid {
	const fit::Field* field = [super getField:40];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getStanceTimePercent {
    return ([super getFieldFLOAT32ValueForField:40 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setStanceTimePercent:(FITFloat32)stanceTimePercent {
    [super setFieldFLOAT32ValueForField:40 andValue:(stanceTimePercent) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// StanceTime 
- (BOOL)isStanceTimeValid {
	const fit::Field* field = [super getField:41];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getStanceTime {
    return ([super getFieldFLOAT32ValueForField:41 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setStanceTime:(FITFloat32)stanceTime {
    [super setFieldFLOAT32ValueForField:41 andValue:(stanceTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// ActivityType 
- (BOOL)isActivityTypeValid {
	const fit::Field* field = [super getField:42];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITActivityType)getActivityType {
    return ([super getFieldENUMValueForField:42 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setActivityType:(FITActivityType)activityType {
    [super setFieldENUMValueForField:42 andValue:(activityType) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// LeftTorqueEffectiveness 
- (BOOL)isLeftTorqueEffectivenessValid {
	const fit::Field* field = [super getField:43];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getLeftTorqueEffectiveness {
    return ([super getFieldFLOAT32ValueForField:43 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setLeftTorqueEffectiveness:(FITFloat32)leftTorqueEffectiveness {
    [super setFieldFLOAT32ValueForField:43 andValue:(leftTorqueEffectiveness) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// RightTorqueEffectiveness 
- (BOOL)isRightTorqueEffectivenessValid {
	const fit::Field* field = [super getField:44];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getRightTorqueEffectiveness {
    return ([super getFieldFLOAT32ValueForField:44 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setRightTorqueEffectiveness:(FITFloat32)rightTorqueEffectiveness {
    [super setFieldFLOAT32ValueForField:44 andValue:(rightTorqueEffectiveness) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// LeftPedalSmoothness 
- (BOOL)isLeftPedalSmoothnessValid {
	const fit::Field* field = [super getField:45];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getLeftPedalSmoothness {
    return ([super getFieldFLOAT32ValueForField:45 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setLeftPedalSmoothness:(FITFloat32)leftPedalSmoothness {
    [super setFieldFLOAT32ValueForField:45 andValue:(leftPedalSmoothness) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// RightPedalSmoothness 
- (BOOL)isRightPedalSmoothnessValid {
	const fit::Field* field = [super getField:46];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getRightPedalSmoothness {
    return ([super getFieldFLOAT32ValueForField:46 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setRightPedalSmoothness:(FITFloat32)rightPedalSmoothness {
    [super setFieldFLOAT32ValueForField:46 andValue:(rightPedalSmoothness) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// CombinedPedalSmoothness 
- (BOOL)isCombinedPedalSmoothnessValid {
	const fit::Field* field = [super getField:47];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getCombinedPedalSmoothness {
    return ([super getFieldFLOAT32ValueForField:47 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCombinedPedalSmoothness:(FITFloat32)combinedPedalSmoothness {
    [super setFieldFLOAT32ValueForField:47 andValue:(combinedPedalSmoothness) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Time128 
- (BOOL)isTime128Valid {
	const fit::Field* field = [super getField:48];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTime128 {
    return ([super getFieldFLOAT32ValueForField:48 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTime128:(FITFloat32)time128 {
    [super setFieldFLOAT32ValueForField:48 andValue:(time128) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// StrokeType 
- (BOOL)isStrokeTypeValid {
	const fit::Field* field = [super getField:49];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITStrokeType)getStrokeType {
    return ([super getFieldENUMValueForField:49 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setStrokeType:(FITStrokeType)strokeType {
    [super setFieldENUMValueForField:49 andValue:(strokeType) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Zone 
- (BOOL)isZoneValid {
	const fit::Field* field = [super getField:50];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getZone {
    return ([super getFieldUINT8ValueForField:50 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setZone:(FITUInt8)zone {
    [super setFieldUINT8ValueForField:50 andValue:(zone) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// BallSpeed 
- (BOOL)isBallSpeedValid {
	const fit::Field* field = [super getField:51];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getBallSpeed {
    return ([super getFieldFLOAT32ValueForField:51 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setBallSpeed:(FITFloat32)ballSpeed {
    [super setFieldFLOAT32ValueForField:51 andValue:(ballSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Cadence256 
- (BOOL)isCadence256Valid {
	const fit::Field* field = [super getField:52];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getCadence256 {
    return ([super getFieldFLOAT32ValueForField:52 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCadence256:(FITFloat32)cadence256 {
    [super setFieldFLOAT32ValueForField:52 andValue:(cadence256) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// FractionalCadence 
- (BOOL)isFractionalCadenceValid {
	const fit::Field* field = [super getField:53];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getFractionalCadence {
    return ([super getFieldFLOAT32ValueForField:53 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setFractionalCadence:(FITFloat32)fractionalCadence {
    [super setFieldFLOAT32ValueForField:53 andValue:(fractionalCadence) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalHemoglobinConc 
- (BOOL)isTotalHemoglobinConcValid {
	const fit::Field* field = [super getField:54];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalHemoglobinConc {
    return ([super getFieldFLOAT32ValueForField:54 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalHemoglobinConc:(FITFloat32)totalHemoglobinConc {
    [super setFieldFLOAT32ValueForField:54 andValue:(totalHemoglobinConc) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalHemoglobinConcMin 
- (BOOL)isTotalHemoglobinConcMinValid {
	const fit::Field* field = [super getField:55];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalHemoglobinConcMin {
    return ([super getFieldFLOAT32ValueForField:55 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalHemoglobinConcMin:(FITFloat32)totalHemoglobinConcMin {
    [super setFieldFLOAT32ValueForField:55 andValue:(totalHemoglobinConcMin) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalHemoglobinConcMax 
- (BOOL)isTotalHemoglobinConcMaxValid {
	const fit::Field* field = [super getField:56];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalHemoglobinConcMax {
    return ([super getFieldFLOAT32ValueForField:56 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalHemoglobinConcMax:(FITFloat32)totalHemoglobinConcMax {
    [super setFieldFLOAT32ValueForField:56 andValue:(totalHemoglobinConcMax) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SaturatedHemoglobinPercent 
- (BOOL)isSaturatedHemoglobinPercentValid {
	const fit::Field* field = [super getField:57];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getSaturatedHemoglobinPercent {
    return ([super getFieldFLOAT32ValueForField:57 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSaturatedHemoglobinPercent:(FITFloat32)saturatedHemoglobinPercent {
    [super setFieldFLOAT32ValueForField:57 andValue:(saturatedHemoglobinPercent) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SaturatedHemoglobinPercentMin 
- (BOOL)isSaturatedHemoglobinPercentMinValid {
	const fit::Field* field = [super getField:58];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getSaturatedHemoglobinPercentMin {
    return ([super getFieldFLOAT32ValueForField:58 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSaturatedHemoglobinPercentMin:(FITFloat32)saturatedHemoglobinPercentMin {
    [super setFieldFLOAT32ValueForField:58 andValue:(saturatedHemoglobinPercentMin) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SaturatedHemoglobinPercentMax 
- (BOOL)isSaturatedHemoglobinPercentMaxValid {
	const fit::Field* field = [super getField:59];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getSaturatedHemoglobinPercentMax {
    return ([super getFieldFLOAT32ValueForField:59 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSaturatedHemoglobinPercentMax:(FITFloat32)saturatedHemoglobinPercentMax {
    [super setFieldFLOAT32ValueForField:59 andValue:(saturatedHemoglobinPercentMax) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// DeviceIndex 
- (BOOL)isDeviceIndexValid {
	const fit::Field* field = [super getField:62];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITDeviceIndex)getDeviceIndex {
    return ([super getFieldUINT8ValueForField:62 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setDeviceIndex:(FITDeviceIndex)deviceIndex {
    [super setFieldUINT8ValueForField:62 andValue:(deviceIndex) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// LeftPco 
- (BOOL)isLeftPcoValid {
	const fit::Field* field = [super getField:67];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt8)getLeftPco {
    return ([super getFieldSINT8ValueForField:67 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setLeftPco:(FITSInt8)leftPco {
    [super setFieldSINT8ValueForField:67 andValue:(leftPco) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// RightPco 
- (BOOL)isRightPcoValid {
	const fit::Field* field = [super getField:68];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt8)getRightPco {
    return ([super getFieldSINT8ValueForField:68 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setRightPco:(FITSInt8)rightPco {
    [super setFieldSINT8ValueForField:68 andValue:(rightPco) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// LeftPowerPhase 
- (uint8_t)numLeftPowerPhaseValues {
    return [super getFieldNumValuesForField:69 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isLeftPowerPhaseValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:69];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getLeftPowerPhaseforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:69 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setLeftPowerPhase:(FITFloat32)leftPowerPhase forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:69 andValue:(leftPowerPhase) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// LeftPowerPhasePeak 
- (uint8_t)numLeftPowerPhasePeakValues {
    return [super getFieldNumValuesForField:70 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isLeftPowerPhasePeakValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:70];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getLeftPowerPhasePeakforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:70 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setLeftPowerPhasePeak:(FITFloat32)leftPowerPhasePeak forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:70 andValue:(leftPowerPhasePeak) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// RightPowerPhase 
- (uint8_t)numRightPowerPhaseValues {
    return [super getFieldNumValuesForField:71 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isRightPowerPhaseValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:71];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getRightPowerPhaseforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:71 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setRightPowerPhase:(FITFloat32)rightPowerPhase forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:71 andValue:(rightPowerPhase) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// RightPowerPhasePeak 
- (uint8_t)numRightPowerPhasePeakValues {
    return [super getFieldNumValuesForField:72 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isRightPowerPhasePeakValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:72];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getRightPowerPhasePeakforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:72 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setRightPowerPhasePeak:(FITFloat32)rightPowerPhasePeak forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:72 andValue:(rightPowerPhasePeak) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EnhancedSpeed 
- (BOOL)isEnhancedSpeedValid {
	const fit::Field* field = [super getField:73];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getEnhancedSpeed {
    return ([super getFieldFLOAT32ValueForField:73 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEnhancedSpeed:(FITFloat32)enhancedSpeed {
    [super setFieldFLOAT32ValueForField:73 andValue:(enhancedSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EnhancedAltitude 
- (BOOL)isEnhancedAltitudeValid {
	const fit::Field* field = [super getField:78];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getEnhancedAltitude {
    return ([super getFieldFLOAT32ValueForField:78 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEnhancedAltitude:(FITFloat32)enhancedAltitude {
    [super setFieldFLOAT32ValueForField:78 andValue:(enhancedAltitude) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// BatterySoc 
- (BOOL)isBatterySocValid {
	const fit::Field* field = [super getField:81];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getBatterySoc {
    return ([super getFieldFLOAT32ValueForField:81 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setBatterySoc:(FITFloat32)batterySoc {
    [super setFieldFLOAT32ValueForField:81 andValue:(batterySoc) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MotorPower 
- (BOOL)isMotorPowerValid {
	const fit::Field* field = [super getField:82];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getMotorPower {
    return ([super getFieldUINT16ValueForField:82 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMotorPower:(FITUInt16)motorPower {
    [super setFieldUINT16ValueForField:82 andValue:(motorPower) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// VerticalRatio 
- (BOOL)isVerticalRatioValid {
	const fit::Field* field = [super getField:83];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getVerticalRatio {
    return ([super getFieldFLOAT32ValueForField:83 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setVerticalRatio:(FITFloat32)verticalRatio {
    [super setFieldFLOAT32ValueForField:83 andValue:(verticalRatio) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// StanceTimeBalance 
- (BOOL)isStanceTimeBalanceValid {
	const fit::Field* field = [super getField:84];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getStanceTimeBalance {
    return ([super getFieldFLOAT32ValueForField:84 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setStanceTimeBalance:(FITFloat32)stanceTimeBalance {
    [super setFieldFLOAT32ValueForField:84 andValue:(stanceTimeBalance) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// StepLength 
- (BOOL)isStepLengthValid {
	const fit::Field* field = [super getField:85];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getStepLength {
    return ([super getFieldFLOAT32ValueForField:85 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setStepLength:(FITFloat32)stepLength {
    [super setFieldFLOAT32ValueForField:85 andValue:(stepLength) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AbsolutePressure 
- (BOOL)isAbsolutePressureValid {
	const fit::Field* field = [super getField:91];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getAbsolutePressure {
    return ([super getFieldUINT32ValueForField:91 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAbsolutePressure:(FITUInt32)absolutePressure {
    [super setFieldUINT32ValueForField:91 andValue:(absolutePressure) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Depth 
- (BOOL)isDepthValid {
	const fit::Field* field = [super getField:92];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getDepth {
    return ([super getFieldFLOAT32ValueForField:92 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setDepth:(FITFloat32)depth {
    [super setFieldFLOAT32ValueForField:92 andValue:(depth) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// NextStopDepth 
- (BOOL)isNextStopDepthValid {
	const fit::Field* field = [super getField:93];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getNextStopDepth {
    return ([super getFieldFLOAT32ValueForField:93 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setNextStopDepth:(FITFloat32)nextStopDepth {
    [super setFieldFLOAT32ValueForField:93 andValue:(nextStopDepth) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// NextStopTime 
- (BOOL)isNextStopTimeValid {
	const fit::Field* field = [super getField:94];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getNextStopTime {
    return ([super getFieldUINT32ValueForField:94 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setNextStopTime:(FITUInt32)nextStopTime {
    [super setFieldUINT32ValueForField:94 andValue:(nextStopTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TimeToSurface 
- (BOOL)isTimeToSurfaceValid {
	const fit::Field* field = [super getField:95];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getTimeToSurface {
    return ([super getFieldUINT32ValueForField:95 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTimeToSurface:(FITUInt32)timeToSurface {
    [super setFieldUINT32ValueForField:95 andValue:(timeToSurface) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// NdlTime 
- (BOOL)isNdlTimeValid {
	const fit::Field* field = [super getField:96];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getNdlTime {
    return ([super getFieldUINT32ValueForField:96 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setNdlTime:(FITUInt32)ndlTime {
    [super setFieldUINT32ValueForField:96 andValue:(ndlTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// CnsLoad 
- (BOOL)isCnsLoadValid {
	const fit::Field* field = [super getField:97];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getCnsLoad {
    return ([super getFieldUINT8ValueForField:97 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCnsLoad:(FITUInt8)cnsLoad {
    [super setFieldUINT8ValueForField:97 andValue:(cnsLoad) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// N2Load 
- (BOOL)isN2LoadValid {
	const fit::Field* field = [super getField:98];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getN2Load {
    return ([super getFieldUINT16ValueForField:98 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setN2Load:(FITUInt16)n2Load {
    [super setFieldUINT16ValueForField:98 andValue:(n2Load) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Grit 
- (BOOL)isGritValid {
	const fit::Field* field = [super getField:114];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getGrit {
    return ([super getFieldFLOAT32ValueForField:114 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setGrit:(FITFloat32)grit {
    [super setFieldFLOAT32ValueForField:114 andValue:(grit) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Flow 
- (BOOL)isFlowValid {
	const fit::Field* field = [super getField:115];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getFlow {
    return ([super getFieldFLOAT32ValueForField:115 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setFlow:(FITFloat32)flow {
    [super setFieldFLOAT32ValueForField:115 andValue:(flow) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EbikeTravelRange 
- (BOOL)isEbikeTravelRangeValid {
	const fit::Field* field = [super getField:117];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getEbikeTravelRange {
    return ([super getFieldUINT16ValueForField:117 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEbikeTravelRange:(FITUInt16)ebikeTravelRange {
    [super setFieldUINT16ValueForField:117 andValue:(ebikeTravelRange) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EbikeBatteryLevel 
- (BOOL)isEbikeBatteryLevelValid {
	const fit::Field* field = [super getField:118];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getEbikeBatteryLevel {
    return ([super getFieldUINT8ValueForField:118 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEbikeBatteryLevel:(FITUInt8)ebikeBatteryLevel {
    [super setFieldUINT8ValueForField:118 andValue:(ebikeBatteryLevel) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EbikeAssistMode 
- (BOOL)isEbikeAssistModeValid {
	const fit::Field* field = [super getField:119];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getEbikeAssistMode {
    return ([super getFieldUINT8ValueForField:119 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEbikeAssistMode:(FITUInt8)ebikeAssistMode {
    [super setFieldUINT8ValueForField:119 andValue:(ebikeAssistMode) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EbikeAssistLevelPercent 
- (BOOL)isEbikeAssistLevelPercentValid {
	const fit::Field* field = [super getField:120];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getEbikeAssistLevelPercent {
    return ([super getFieldUINT8ValueForField:120 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEbikeAssistLevelPercent:(FITUInt8)ebikeAssistLevelPercent {
    [super setFieldUINT8ValueForField:120 andValue:(ebikeAssistLevelPercent) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// CoreTemperature 
- (BOOL)isCoreTemperatureValid {
	const fit::Field* field = [super getField:139];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getCoreTemperature {
    return ([super getFieldFLOAT32ValueForField:139 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCoreTemperature:(FITFloat32)coreTemperature {
    [super setFieldFLOAT32ValueForField:139 andValue:(coreTemperature) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

@end
