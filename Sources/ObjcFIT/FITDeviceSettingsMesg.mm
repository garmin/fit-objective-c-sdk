/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2022 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.94Release
// Tag = production/akw/21.94.00-0-g0f668193
/////////////////////////////////////////////////////////////////////////////////////////////


#import "FITMessage+Internal.h"


#import "FITDeviceSettingsMesg.h"

@implementation FITDeviceSettingsMesg

- (instancetype)init {
    self = [super initWithFitMesgIndex:fit::Profile::MESG_DEVICE_SETTINGS];

    return self;
}

// ActiveTimeZone 
- (BOOL)isActiveTimeZoneValid {
	const fit::Field* field = [super getField:0];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getActiveTimeZone {
    return ([super getFieldUINT8ValueForField:0 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setActiveTimeZone:(FITUInt8)activeTimeZone {
    [super setFieldUINT8ValueForField:0 andValue:(activeTimeZone) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// UtcOffset 
- (BOOL)isUtcOffsetValid {
	const fit::Field* field = [super getField:1];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getUtcOffset {
    return ([super getFieldUINT32ValueForField:1 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setUtcOffset:(FITUInt32)utcOffset {
    [super setFieldUINT32ValueForField:1 andValue:(utcOffset) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TimeOffset 
- (uint8_t)numTimeOffsetValues {
    return [super getFieldNumValuesForField:2 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isTimeOffsetValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:2];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getTimeOffsetforIndex:(uint8_t)index {
    return ([super getFieldUINT32ValueForField:2 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTimeOffset:(FITUInt32)timeOffset forIndex:(uint8_t)index {
    [super setFieldUINT32ValueForField:2 andValue:(timeOffset) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TimeMode 
- (uint8_t)numTimeModeValues {
    return [super getFieldNumValuesForField:4 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isTimeModeValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:4];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITTimeMode)getTimeModeforIndex:(uint8_t)index {
    return ([super getFieldENUMValueForField:4 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTimeMode:(FITTimeMode)timeMode forIndex:(uint8_t)index {
    [super setFieldENUMValueForField:4 andValue:(timeMode) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TimeZoneOffset 
- (uint8_t)numTimeZoneOffsetValues {
    return [super getFieldNumValuesForField:5 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isTimeZoneOffsetValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:5];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTimeZoneOffsetforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:5 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTimeZoneOffset:(FITFloat32)timeZoneOffset forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:5 andValue:(timeZoneOffset) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// BacklightMode 
- (BOOL)isBacklightModeValid {
	const fit::Field* field = [super getField:12];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITBacklightMode)getBacklightMode {
    return ([super getFieldENUMValueForField:12 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setBacklightMode:(FITBacklightMode)backlightMode {
    [super setFieldENUMValueForField:12 andValue:(backlightMode) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// ActivityTrackerEnabled 
- (BOOL)isActivityTrackerEnabledValid {
	const fit::Field* field = [super getField:36];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITBool)getActivityTrackerEnabled {
    return ([super getFieldENUMValueForField:36 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setActivityTrackerEnabled:(FITBool)activityTrackerEnabled {
    [super setFieldENUMValueForField:36 andValue:(activityTrackerEnabled) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// ClockTime 
- (BOOL)isClockTimeValid {
	const fit::Field* field = [super getField:39];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITDate *)getClockTime {
    return FITDateFromTimestamp([super getFieldUINT32ValueForField:39 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setClockTime:(FITDate *)clockTime {
    [super setFieldUINT32ValueForField:39 andValue:TimestampFromFITDate(clockTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// PagesEnabled 
- (uint8_t)numPagesEnabledValues {
    return [super getFieldNumValuesForField:40 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isPagesEnabledValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:40];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getPagesEnabledforIndex:(uint8_t)index {
    return ([super getFieldUINT16ValueForField:40 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setPagesEnabled:(FITUInt16)pagesEnabled forIndex:(uint8_t)index {
    [super setFieldUINT16ValueForField:40 andValue:(pagesEnabled) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MoveAlertEnabled 
- (BOOL)isMoveAlertEnabledValid {
	const fit::Field* field = [super getField:46];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITBool)getMoveAlertEnabled {
    return ([super getFieldENUMValueForField:46 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMoveAlertEnabled:(FITBool)moveAlertEnabled {
    [super setFieldENUMValueForField:46 andValue:(moveAlertEnabled) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// DateMode 
- (BOOL)isDateModeValid {
	const fit::Field* field = [super getField:47];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITDateMode)getDateMode {
    return ([super getFieldENUMValueForField:47 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setDateMode:(FITDateMode)dateMode {
    [super setFieldENUMValueForField:47 andValue:(dateMode) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// DisplayOrientation 
- (BOOL)isDisplayOrientationValid {
	const fit::Field* field = [super getField:55];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITDisplayOrientation)getDisplayOrientation {
    return ([super getFieldENUMValueForField:55 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setDisplayOrientation:(FITDisplayOrientation)displayOrientation {
    [super setFieldENUMValueForField:55 andValue:(displayOrientation) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MountingSide 
- (BOOL)isMountingSideValid {
	const fit::Field* field = [super getField:56];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSide)getMountingSide {
    return ([super getFieldENUMValueForField:56 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMountingSide:(FITSide)mountingSide {
    [super setFieldENUMValueForField:56 andValue:(mountingSide) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// DefaultPage 
- (uint8_t)numDefaultPageValues {
    return [super getFieldNumValuesForField:57 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isDefaultPageValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:57];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getDefaultPageforIndex:(uint8_t)index {
    return ([super getFieldUINT16ValueForField:57 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setDefaultPage:(FITUInt16)defaultPage forIndex:(uint8_t)index {
    [super setFieldUINT16ValueForField:57 andValue:(defaultPage) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AutosyncMinSteps 
- (BOOL)isAutosyncMinStepsValid {
	const fit::Field* field = [super getField:58];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getAutosyncMinSteps {
    return ([super getFieldUINT16ValueForField:58 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAutosyncMinSteps:(FITUInt16)autosyncMinSteps {
    [super setFieldUINT16ValueForField:58 andValue:(autosyncMinSteps) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AutosyncMinTime 
- (BOOL)isAutosyncMinTimeValid {
	const fit::Field* field = [super getField:59];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getAutosyncMinTime {
    return ([super getFieldUINT16ValueForField:59 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAutosyncMinTime:(FITUInt16)autosyncMinTime {
    [super setFieldUINT16ValueForField:59 andValue:(autosyncMinTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// LactateThresholdAutodetectEnabled 
- (BOOL)isLactateThresholdAutodetectEnabledValid {
	const fit::Field* field = [super getField:80];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITBool)getLactateThresholdAutodetectEnabled {
    return ([super getFieldENUMValueForField:80 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setLactateThresholdAutodetectEnabled:(FITBool)lactateThresholdAutodetectEnabled {
    [super setFieldENUMValueForField:80 andValue:(lactateThresholdAutodetectEnabled) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// BleAutoUploadEnabled 
- (BOOL)isBleAutoUploadEnabledValid {
	const fit::Field* field = [super getField:86];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITBool)getBleAutoUploadEnabled {
    return ([super getFieldENUMValueForField:86 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setBleAutoUploadEnabled:(FITBool)bleAutoUploadEnabled {
    [super setFieldENUMValueForField:86 andValue:(bleAutoUploadEnabled) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AutoSyncFrequency 
- (BOOL)isAutoSyncFrequencyValid {
	const fit::Field* field = [super getField:89];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITAutoSyncFrequency)getAutoSyncFrequency {
    return ([super getFieldENUMValueForField:89 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAutoSyncFrequency:(FITAutoSyncFrequency)autoSyncFrequency {
    [super setFieldENUMValueForField:89 andValue:(autoSyncFrequency) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AutoActivityDetect 
- (BOOL)isAutoActivityDetectValid {
	const fit::Field* field = [super getField:90];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITAutoActivityDetect)getAutoActivityDetect {
    return ([super getFieldUINT32ValueForField:90 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAutoActivityDetect:(FITAutoActivityDetect)autoActivityDetect {
    [super setFieldUINT32ValueForField:90 andValue:(autoActivityDetect) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// NumberOfScreens 
- (BOOL)isNumberOfScreensValid {
	const fit::Field* field = [super getField:94];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getNumberOfScreens {
    return ([super getFieldUINT8ValueForField:94 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setNumberOfScreens:(FITUInt8)numberOfScreens {
    [super setFieldUINT8ValueForField:94 andValue:(numberOfScreens) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SmartNotificationDisplayOrientation 
- (BOOL)isSmartNotificationDisplayOrientationValid {
	const fit::Field* field = [super getField:95];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITDisplayOrientation)getSmartNotificationDisplayOrientation {
    return ([super getFieldENUMValueForField:95 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSmartNotificationDisplayOrientation:(FITDisplayOrientation)smartNotificationDisplayOrientation {
    [super setFieldENUMValueForField:95 andValue:(smartNotificationDisplayOrientation) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TapInterface 
- (BOOL)isTapInterfaceValid {
	const fit::Field* field = [super getField:134];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSwitch)getTapInterface {
    return ([super getFieldENUMValueForField:134 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTapInterface:(FITSwitch)tapInterface {
    [super setFieldENUMValueForField:134 andValue:(tapInterface) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TapSensitivity 
- (BOOL)isTapSensitivityValid {
	const fit::Field* field = [super getField:174];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITTapSensitivity)getTapSensitivity {
    return ([super getFieldENUMValueForField:174 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTapSensitivity:(FITTapSensitivity)tapSensitivity {
    [super setFieldENUMValueForField:174 andValue:(tapSensitivity) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

@end
