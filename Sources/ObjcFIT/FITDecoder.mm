/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2022 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.94Release
// Tag = production/akw/21.94.00-0-g0f668193
/////////////////////////////////////////////////////////////////////////////////////////////


#import "FITDecoder.h"
#import "FITString.h"
#import "FITMessage+Internal.h"
#import "FITDeveloperFieldDef.h"

#import <fstream>
#import <iostream>

#import <fit_decode.hpp>
#import <FITDecoder-Bridge.h>

@interface FITDecoder ()
@property (nonatomic, readwrite, assign) fit::Decode *decoder;

- (void) onMesg:(fit::Mesg *) fit_mesg;
@end

@implementation FITDecoder

- (instancetype)init {
    self = [super init];
    if (self) {
        _decoder = new fit::Decode();
    }
    return self;
}

- (void)dealloc {
    delete _decoder;
    _decoder = nullptr;
}

- (BOOL)isFIT:(NSString*)filename {

    std::fstream file;
    file.open([filename UTF8String], std::ios::in | std::ios::binary);

    if (!file.is_open())
    {
        return NO;
    }

    return _decoder->IsFIT(file) == FITBoolTrue ? YES : NO;
}

- (BOOL)checkIntegrity:(NSString*)filename {

    std::fstream file;
    file.open([filename UTF8String], std::ios::in | std::ios::binary);

    if (!file.is_open())
    {
        return NO;
    }

    return _decoder->CheckIntegrity(file) == FITBoolTrue ? YES : NO;
}

- (BOOL)decodeFile:(NSString*)filename {

    try {
        std::fstream file;
        file.open([filename UTF8String], std::ios::in | std::ios::binary);

        if (!file.is_open())
        {
            return NO;
        }

        return _decoder->Read(&file, (__bridge void*)self) == FITBoolTrue ? YES : NO;
    }
    catch (...) {
        return NO;
    }
}

- (void)onMesg:(fit::Mesg *) fit_mesg {
    [self.mesgDelegate onMesg:[[FITMessage alloc] initWithFitMesg:fit_mesg]];
    return;
}

- (void)onMesgDefinition:(fit::MesgDefinition *) fit_mesg_definition {
    //[self.mesgDefinitionDelegate onMesgDefinition:[[FITMesgDefinition alloc] initWithFitMesgDefinition:fit_mesg_definition]];
    return;
}

- (void)onDeveloperFieldDefinition:(fit::FieldDescriptionMesg *) fit_fieldDescriptionMesg withDeveloperId:(fit::DeveloperDataIdMesg*)fit_developerDataIdMesg {
    FITFieldDescriptionMesg* description = [[FITFieldDescriptionMesg alloc] initWithFitMesg:fit_fieldDescriptionMesg];
    FITDeveloperDataIdMesg* developer = [[FITDeveloperDataIdMesg alloc] initWithFitMesg:fit_developerDataIdMesg];
    FITDeveloperFieldDefinition* definition = [[FITDeveloperFieldDefinition alloc] initWithFieldDescriptionMesg:description andDeveloperDataIdMesg: developer];

    [self.developerFieldDefinitionDelegate onDeveloperFieldDefinition:definition];
    return;
}

void OnMesgFromDecoder (void *decoder, void *mesg) {
    // Forward message to the FITDecoder
    [(__bridge id) decoder onMesg:(fit::Mesg *)mesg];

    return;
}

void OnMesgDefinitionFromDecoder(void *decoder, void *mesgDefinition)  {
    // Forward message to the FITDecoder
    [(__bridge id) decoder onMesgDefinition:(fit::MesgDefinition *)mesgDefinition];

    return;
}

void OnDeveloperFieldDefinitionFromDecoder(void *decoder, void *fieldDescriptionMesg, void *developerDataIdMesg) {
    // Forward message to the FITDecoder
    [(__bridge id) decoder onDeveloperFieldDefinition:(fit::FieldDescriptionMesg *)fieldDescriptionMesg withDeveloperId:(fit::DeveloperDataIdMesg*)developerDataIdMesg];

    return;
}

@end
