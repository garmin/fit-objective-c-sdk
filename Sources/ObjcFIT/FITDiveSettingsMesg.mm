/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2022 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.94Release
// Tag = production/akw/21.94.00-0-g0f668193
/////////////////////////////////////////////////////////////////////////////////////////////


#import "FITMessage+Internal.h"

#import "FITString.h"

#import "FITDiveSettingsMesg.h"

@implementation FITDiveSettingsMesg

- (instancetype)init {
    self = [super initWithFitMesgIndex:fit::Profile::MESG_DIVE_SETTINGS];

    return self;
}

// MessageIndex 
- (BOOL)isMessageIndexValid {
	const fit::Field* field = [super getField:254];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITMessageIndex)getMessageIndex {
    return ([super getFieldUINT16ValueForField:254 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMessageIndex:(FITMessageIndex)messageIndex {
    [super setFieldUINT16ValueForField:254 andValue:(messageIndex) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Name 
- (BOOL)isNameValid {
	const fit::Field* field = [super getField:0];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (NSString *)getName {
    return ([super getFieldSTRINGValueForField:0 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setName:(NSString *)name {
    [super setFieldSTRINGValueForField:0 andValue:(name) forIndex:0];
} 

// Model 
- (BOOL)isModelValid {
	const fit::Field* field = [super getField:1];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITTissueModelType)getModel {
    return ([super getFieldENUMValueForField:1 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setModel:(FITTissueModelType)model {
    [super setFieldENUMValueForField:1 andValue:(model) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// GfLow 
- (BOOL)isGfLowValid {
	const fit::Field* field = [super getField:2];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getGfLow {
    return ([super getFieldUINT8ValueForField:2 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setGfLow:(FITUInt8)gfLow {
    [super setFieldUINT8ValueForField:2 andValue:(gfLow) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// GfHigh 
- (BOOL)isGfHighValid {
	const fit::Field* field = [super getField:3];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getGfHigh {
    return ([super getFieldUINT8ValueForField:3 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setGfHigh:(FITUInt8)gfHigh {
    [super setFieldUINT8ValueForField:3 andValue:(gfHigh) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// WaterType 
- (BOOL)isWaterTypeValid {
	const fit::Field* field = [super getField:4];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITWaterType)getWaterType {
    return ([super getFieldENUMValueForField:4 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setWaterType:(FITWaterType)waterType {
    [super setFieldENUMValueForField:4 andValue:(waterType) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// WaterDensity 
- (BOOL)isWaterDensityValid {
	const fit::Field* field = [super getField:5];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getWaterDensity {
    return ([super getFieldFLOAT32ValueForField:5 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setWaterDensity:(FITFloat32)waterDensity {
    [super setFieldFLOAT32ValueForField:5 andValue:(waterDensity) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Po2Warn 
- (BOOL)isPo2WarnValid {
	const fit::Field* field = [super getField:6];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getPo2Warn {
    return ([super getFieldFLOAT32ValueForField:6 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setPo2Warn:(FITFloat32)po2Warn {
    [super setFieldFLOAT32ValueForField:6 andValue:(po2Warn) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Po2Critical 
- (BOOL)isPo2CriticalValid {
	const fit::Field* field = [super getField:7];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getPo2Critical {
    return ([super getFieldFLOAT32ValueForField:7 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setPo2Critical:(FITFloat32)po2Critical {
    [super setFieldFLOAT32ValueForField:7 andValue:(po2Critical) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Po2Deco 
- (BOOL)isPo2DecoValid {
	const fit::Field* field = [super getField:8];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getPo2Deco {
    return ([super getFieldFLOAT32ValueForField:8 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setPo2Deco:(FITFloat32)po2Deco {
    [super setFieldFLOAT32ValueForField:8 andValue:(po2Deco) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SafetyStopEnabled 
- (BOOL)isSafetyStopEnabledValid {
	const fit::Field* field = [super getField:9];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITBool)getSafetyStopEnabled {
    return ([super getFieldENUMValueForField:9 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSafetyStopEnabled:(FITBool)safetyStopEnabled {
    [super setFieldENUMValueForField:9 andValue:(safetyStopEnabled) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// BottomDepth 
- (BOOL)isBottomDepthValid {
	const fit::Field* field = [super getField:10];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getBottomDepth {
    return ([super getFieldFLOAT32ValueForField:10 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setBottomDepth:(FITFloat32)bottomDepth {
    [super setFieldFLOAT32ValueForField:10 andValue:(bottomDepth) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// BottomTime 
- (BOOL)isBottomTimeValid {
	const fit::Field* field = [super getField:11];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getBottomTime {
    return ([super getFieldUINT32ValueForField:11 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setBottomTime:(FITUInt32)bottomTime {
    [super setFieldUINT32ValueForField:11 andValue:(bottomTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// ApneaCountdownEnabled 
- (BOOL)isApneaCountdownEnabledValid {
	const fit::Field* field = [super getField:12];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITBool)getApneaCountdownEnabled {
    return ([super getFieldENUMValueForField:12 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setApneaCountdownEnabled:(FITBool)apneaCountdownEnabled {
    [super setFieldENUMValueForField:12 andValue:(apneaCountdownEnabled) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// ApneaCountdownTime 
- (BOOL)isApneaCountdownTimeValid {
	const fit::Field* field = [super getField:13];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getApneaCountdownTime {
    return ([super getFieldUINT32ValueForField:13 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setApneaCountdownTime:(FITUInt32)apneaCountdownTime {
    [super setFieldUINT32ValueForField:13 andValue:(apneaCountdownTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// BacklightMode 
- (BOOL)isBacklightModeValid {
	const fit::Field* field = [super getField:14];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITDiveBacklightMode)getBacklightMode {
    return ([super getFieldENUMValueForField:14 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setBacklightMode:(FITDiveBacklightMode)backlightMode {
    [super setFieldENUMValueForField:14 andValue:(backlightMode) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// BacklightBrightness 
- (BOOL)isBacklightBrightnessValid {
	const fit::Field* field = [super getField:15];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getBacklightBrightness {
    return ([super getFieldUINT8ValueForField:15 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setBacklightBrightness:(FITUInt8)backlightBrightness {
    [super setFieldUINT8ValueForField:15 andValue:(backlightBrightness) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// BacklightTimeout 
- (BOOL)isBacklightTimeoutValid {
	const fit::Field* field = [super getField:16];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITBacklightTimeout)getBacklightTimeout {
    return ([super getFieldUINT8ValueForField:16 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setBacklightTimeout:(FITBacklightTimeout)backlightTimeout {
    [super setFieldUINT8ValueForField:16 andValue:(backlightTimeout) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// RepeatDiveInterval 
- (BOOL)isRepeatDiveIntervalValid {
	const fit::Field* field = [super getField:17];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getRepeatDiveInterval {
    return ([super getFieldUINT16ValueForField:17 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setRepeatDiveInterval:(FITUInt16)repeatDiveInterval {
    [super setFieldUINT16ValueForField:17 andValue:(repeatDiveInterval) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SafetyStopTime 
- (BOOL)isSafetyStopTimeValid {
	const fit::Field* field = [super getField:18];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getSafetyStopTime {
    return ([super getFieldUINT16ValueForField:18 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSafetyStopTime:(FITUInt16)safetyStopTime {
    [super setFieldUINT16ValueForField:18 andValue:(safetyStopTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// HeartRateSourceType 
- (BOOL)isHeartRateSourceTypeValid {
	const fit::Field* field = [super getField:19];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSourceType)getHeartRateSourceType {
    return ([super getFieldENUMValueForField:19 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setHeartRateSourceType:(FITSourceType)heartRateSourceType {
    [super setFieldENUMValueForField:19 andValue:(heartRateSourceType) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// HeartRateSource 
- (BOOL)isHeartRateSourceValid {
	const fit::Field* field = [super getField:20];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getHeartRateSource {
    return ([super getFieldUINT8ValueForField:20 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setHeartRateSource:(FITUInt8)heartRateSource {
    [super setFieldUINT8ValueForField:20 andValue:(heartRateSource) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 
// HeartRateSource - Sub Fields
// HeartRateAntplusDeviceType - HeartRateSource Field - Sub Field 
- (BOOL)isHeartRateAntplusDeviceTypeValid
{
    const fit::Field* field = [super getField:20];
    if( FIT_NULL == field ) {
        return FIT_FALSE;
    }

    if(![super canField:20 supportSubField:(FITUInt16)FITDiveSettingsMesgHeartRateSourceFieldHeartRateAntplusDeviceTypeSubField]) {
        return FIT_FALSE;
    }

    return field->IsValueValid(0, FITDiveSettingsMesgHeartRateSourceFieldHeartRateAntplusDeviceTypeSubField) == FIT_TRUE ? TRUE : FALSE;
}

- (FITAntplusDeviceType)getHeartRateAntplusDeviceType
{
    return ([super getFieldUINT8ValueForField:20 forIndex:0 andSubFieldIndex:FITDiveSettingsMesgHeartRateSourceFieldHeartRateAntplusDeviceTypeSubField]);
}

- (void)setHeartRateAntplusDeviceType:(FITAntplusDeviceType)heartRateAntplusDeviceType
{
    [super setFieldUINT8ValueForField:20 andValue:(heartRateAntplusDeviceType) forIndex:0 andSubFieldIndex:FITDiveSettingsMesgHeartRateSourceFieldHeartRateAntplusDeviceTypeSubField];
} 
// HeartRateLocalDeviceType - HeartRateSource Field - Sub Field 
- (BOOL)isHeartRateLocalDeviceTypeValid
{
    const fit::Field* field = [super getField:20];
    if( FIT_NULL == field ) {
        return FIT_FALSE;
    }

    if(![super canField:20 supportSubField:(FITUInt16)FITDiveSettingsMesgHeartRateSourceFieldHeartRateLocalDeviceTypeSubField]) {
        return FIT_FALSE;
    }

    return field->IsValueValid(0, FITDiveSettingsMesgHeartRateSourceFieldHeartRateLocalDeviceTypeSubField) == FIT_TRUE ? TRUE : FALSE;
}

- (FITLocalDeviceType)getHeartRateLocalDeviceType
{
    return ([super getFieldUINT8ValueForField:20 forIndex:0 andSubFieldIndex:FITDiveSettingsMesgHeartRateSourceFieldHeartRateLocalDeviceTypeSubField]);
}

- (void)setHeartRateLocalDeviceType:(FITLocalDeviceType)heartRateLocalDeviceType
{
    [super setFieldUINT8ValueForField:20 andValue:(heartRateLocalDeviceType) forIndex:0 andSubFieldIndex:FITDiveSettingsMesgHeartRateSourceFieldHeartRateLocalDeviceTypeSubField];
} 

@end
