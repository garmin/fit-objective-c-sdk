/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2022 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.94Release
// Tag = production/akw/21.94.00-0-g0f668193
/////////////////////////////////////////////////////////////////////////////////////////////


#import "FITMessage+Internal.h"

#import "FITString.h"

#import "FITSessionMesg.h"

@implementation FITSessionMesg

- (instancetype)init {
    self = [super initWithFitMesgIndex:fit::Profile::MESG_SESSION];

    return self;
}

// MessageIndex 
- (BOOL)isMessageIndexValid {
	const fit::Field* field = [super getField:254];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITMessageIndex)getMessageIndex {
    return ([super getFieldUINT16ValueForField:254 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMessageIndex:(FITMessageIndex)messageIndex {
    [super setFieldUINT16ValueForField:254 andValue:(messageIndex) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Timestamp 
- (BOOL)isTimestampValid {
	const fit::Field* field = [super getField:253];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITDate *)getTimestamp {
    return FITDateFromTimestamp([super getFieldUINT32ValueForField:253 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTimestamp:(FITDate *)timestamp {
    [super setFieldUINT32ValueForField:253 andValue:TimestampFromFITDate(timestamp) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Event 
- (BOOL)isEventValid {
	const fit::Field* field = [super getField:0];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITEvent)getEvent {
    return ([super getFieldENUMValueForField:0 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEvent:(FITEvent)event {
    [super setFieldENUMValueForField:0 andValue:(event) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EventType 
- (BOOL)isEventTypeValid {
	const fit::Field* field = [super getField:1];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITEventType)getEventType {
    return ([super getFieldENUMValueForField:1 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEventType:(FITEventType)eventType {
    [super setFieldENUMValueForField:1 andValue:(eventType) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// StartTime 
- (BOOL)isStartTimeValid {
	const fit::Field* field = [super getField:2];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITDate *)getStartTime {
    return FITDateFromTimestamp([super getFieldUINT32ValueForField:2 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setStartTime:(FITDate *)startTime {
    [super setFieldUINT32ValueForField:2 andValue:TimestampFromFITDate(startTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// StartPositionLat 
- (BOOL)isStartPositionLatValid {
	const fit::Field* field = [super getField:3];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt32)getStartPositionLat {
    return ([super getFieldSINT32ValueForField:3 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setStartPositionLat:(FITSInt32)startPositionLat {
    [super setFieldSINT32ValueForField:3 andValue:(startPositionLat) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// StartPositionLong 
- (BOOL)isStartPositionLongValid {
	const fit::Field* field = [super getField:4];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt32)getStartPositionLong {
    return ([super getFieldSINT32ValueForField:4 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setStartPositionLong:(FITSInt32)startPositionLong {
    [super setFieldSINT32ValueForField:4 andValue:(startPositionLong) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Sport 
- (BOOL)isSportValid {
	const fit::Field* field = [super getField:5];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSport)getSport {
    return ([super getFieldENUMValueForField:5 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSport:(FITSport)sport {
    [super setFieldENUMValueForField:5 andValue:(sport) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SubSport 
- (BOOL)isSubSportValid {
	const fit::Field* field = [super getField:6];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSubSport)getSubSport {
    return ([super getFieldENUMValueForField:6 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSubSport:(FITSubSport)subSport {
    [super setFieldENUMValueForField:6 andValue:(subSport) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalElapsedTime 
- (BOOL)isTotalElapsedTimeValid {
	const fit::Field* field = [super getField:7];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalElapsedTime {
    return ([super getFieldFLOAT32ValueForField:7 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalElapsedTime:(FITFloat32)totalElapsedTime {
    [super setFieldFLOAT32ValueForField:7 andValue:(totalElapsedTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalTimerTime 
- (BOOL)isTotalTimerTimeValid {
	const fit::Field* field = [super getField:8];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalTimerTime {
    return ([super getFieldFLOAT32ValueForField:8 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalTimerTime:(FITFloat32)totalTimerTime {
    [super setFieldFLOAT32ValueForField:8 andValue:(totalTimerTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalDistance 
- (BOOL)isTotalDistanceValid {
	const fit::Field* field = [super getField:9];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalDistance {
    return ([super getFieldFLOAT32ValueForField:9 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalDistance:(FITFloat32)totalDistance {
    [super setFieldFLOAT32ValueForField:9 andValue:(totalDistance) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalCycles 
- (BOOL)isTotalCyclesValid {
	const fit::Field* field = [super getField:10];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getTotalCycles {
    return ([super getFieldUINT32ValueForField:10 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalCycles:(FITUInt32)totalCycles {
    [super setFieldUINT32ValueForField:10 andValue:(totalCycles) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 
// TotalCycles - Sub Fields
// TotalStrides - TotalCycles Field - Sub Field 
- (BOOL)isTotalStridesValid
{
    const fit::Field* field = [super getField:10];
    if( FIT_NULL == field ) {
        return FIT_FALSE;
    }

    if(![super canField:10 supportSubField:(FITUInt16)FITSessionMesgTotalCyclesFieldTotalStridesSubField]) {
        return FIT_FALSE;
    }

    return field->IsValueValid(0, FITSessionMesgTotalCyclesFieldTotalStridesSubField) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getTotalStrides
{
    return ([super getFieldUINT32ValueForField:10 forIndex:0 andSubFieldIndex:FITSessionMesgTotalCyclesFieldTotalStridesSubField]);
}

- (void)setTotalStrides:(FITUInt32)totalStrides
{
    [super setFieldUINT32ValueForField:10 andValue:(totalStrides) forIndex:0 andSubFieldIndex:FITSessionMesgTotalCyclesFieldTotalStridesSubField];
} 
// TotalStrokes - TotalCycles Field - Sub Field 
- (BOOL)isTotalStrokesValid
{
    const fit::Field* field = [super getField:10];
    if( FIT_NULL == field ) {
        return FIT_FALSE;
    }

    if(![super canField:10 supportSubField:(FITUInt16)FITSessionMesgTotalCyclesFieldTotalStrokesSubField]) {
        return FIT_FALSE;
    }

    return field->IsValueValid(0, FITSessionMesgTotalCyclesFieldTotalStrokesSubField) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getTotalStrokes
{
    return ([super getFieldUINT32ValueForField:10 forIndex:0 andSubFieldIndex:FITSessionMesgTotalCyclesFieldTotalStrokesSubField]);
}

- (void)setTotalStrokes:(FITUInt32)totalStrokes
{
    [super setFieldUINT32ValueForField:10 andValue:(totalStrokes) forIndex:0 andSubFieldIndex:FITSessionMesgTotalCyclesFieldTotalStrokesSubField];
} 

// TotalCalories 
- (BOOL)isTotalCaloriesValid {
	const fit::Field* field = [super getField:11];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getTotalCalories {
    return ([super getFieldUINT16ValueForField:11 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalCalories:(FITUInt16)totalCalories {
    [super setFieldUINT16ValueForField:11 andValue:(totalCalories) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalFatCalories 
- (BOOL)isTotalFatCaloriesValid {
	const fit::Field* field = [super getField:13];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getTotalFatCalories {
    return ([super getFieldUINT16ValueForField:13 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalFatCalories:(FITUInt16)totalFatCalories {
    [super setFieldUINT16ValueForField:13 andValue:(totalFatCalories) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgSpeed 
- (BOOL)isAvgSpeedValid {
	const fit::Field* field = [super getField:14];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgSpeed {
    return ([super getFieldFLOAT32ValueForField:14 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgSpeed:(FITFloat32)avgSpeed {
    [super setFieldFLOAT32ValueForField:14 andValue:(avgSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxSpeed 
- (BOOL)isMaxSpeedValid {
	const fit::Field* field = [super getField:15];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMaxSpeed {
    return ([super getFieldFLOAT32ValueForField:15 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxSpeed:(FITFloat32)maxSpeed {
    [super setFieldFLOAT32ValueForField:15 andValue:(maxSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgHeartRate 
- (BOOL)isAvgHeartRateValid {
	const fit::Field* field = [super getField:16];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getAvgHeartRate {
    return ([super getFieldUINT8ValueForField:16 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgHeartRate:(FITUInt8)avgHeartRate {
    [super setFieldUINT8ValueForField:16 andValue:(avgHeartRate) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxHeartRate 
- (BOOL)isMaxHeartRateValid {
	const fit::Field* field = [super getField:17];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getMaxHeartRate {
    return ([super getFieldUINT8ValueForField:17 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxHeartRate:(FITUInt8)maxHeartRate {
    [super setFieldUINT8ValueForField:17 andValue:(maxHeartRate) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgCadence 
- (BOOL)isAvgCadenceValid {
	const fit::Field* field = [super getField:18];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getAvgCadence {
    return ([super getFieldUINT8ValueForField:18 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgCadence:(FITUInt8)avgCadence {
    [super setFieldUINT8ValueForField:18 andValue:(avgCadence) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 
// AvgCadence - Sub Fields
// AvgRunningCadence - AvgCadence Field - Sub Field 
- (BOOL)isAvgRunningCadenceValid
{
    const fit::Field* field = [super getField:18];
    if( FIT_NULL == field ) {
        return FIT_FALSE;
    }

    if(![super canField:18 supportSubField:(FITUInt16)FITSessionMesgAvgCadenceFieldAvgRunningCadenceSubField]) {
        return FIT_FALSE;
    }

    return field->IsValueValid(0, FITSessionMesgAvgCadenceFieldAvgRunningCadenceSubField) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getAvgRunningCadence
{
    return ([super getFieldUINT8ValueForField:18 forIndex:0 andSubFieldIndex:FITSessionMesgAvgCadenceFieldAvgRunningCadenceSubField]);
}

- (void)setAvgRunningCadence:(FITUInt8)avgRunningCadence
{
    [super setFieldUINT8ValueForField:18 andValue:(avgRunningCadence) forIndex:0 andSubFieldIndex:FITSessionMesgAvgCadenceFieldAvgRunningCadenceSubField];
} 

// MaxCadence 
- (BOOL)isMaxCadenceValid {
	const fit::Field* field = [super getField:19];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getMaxCadence {
    return ([super getFieldUINT8ValueForField:19 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxCadence:(FITUInt8)maxCadence {
    [super setFieldUINT8ValueForField:19 andValue:(maxCadence) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 
// MaxCadence - Sub Fields
// MaxRunningCadence - MaxCadence Field - Sub Field 
- (BOOL)isMaxRunningCadenceValid
{
    const fit::Field* field = [super getField:19];
    if( FIT_NULL == field ) {
        return FIT_FALSE;
    }

    if(![super canField:19 supportSubField:(FITUInt16)FITSessionMesgMaxCadenceFieldMaxRunningCadenceSubField]) {
        return FIT_FALSE;
    }

    return field->IsValueValid(0, FITSessionMesgMaxCadenceFieldMaxRunningCadenceSubField) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getMaxRunningCadence
{
    return ([super getFieldUINT8ValueForField:19 forIndex:0 andSubFieldIndex:FITSessionMesgMaxCadenceFieldMaxRunningCadenceSubField]);
}

- (void)setMaxRunningCadence:(FITUInt8)maxRunningCadence
{
    [super setFieldUINT8ValueForField:19 andValue:(maxRunningCadence) forIndex:0 andSubFieldIndex:FITSessionMesgMaxCadenceFieldMaxRunningCadenceSubField];
} 

// AvgPower 
- (BOOL)isAvgPowerValid {
	const fit::Field* field = [super getField:20];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getAvgPower {
    return ([super getFieldUINT16ValueForField:20 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgPower:(FITUInt16)avgPower {
    [super setFieldUINT16ValueForField:20 andValue:(avgPower) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxPower 
- (BOOL)isMaxPowerValid {
	const fit::Field* field = [super getField:21];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getMaxPower {
    return ([super getFieldUINT16ValueForField:21 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxPower:(FITUInt16)maxPower {
    [super setFieldUINT16ValueForField:21 andValue:(maxPower) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalAscent 
- (BOOL)isTotalAscentValid {
	const fit::Field* field = [super getField:22];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getTotalAscent {
    return ([super getFieldUINT16ValueForField:22 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalAscent:(FITUInt16)totalAscent {
    [super setFieldUINT16ValueForField:22 andValue:(totalAscent) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalDescent 
- (BOOL)isTotalDescentValid {
	const fit::Field* field = [super getField:23];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getTotalDescent {
    return ([super getFieldUINT16ValueForField:23 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalDescent:(FITUInt16)totalDescent {
    [super setFieldUINT16ValueForField:23 andValue:(totalDescent) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalTrainingEffect 
- (BOOL)isTotalTrainingEffectValid {
	const fit::Field* field = [super getField:24];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalTrainingEffect {
    return ([super getFieldFLOAT32ValueForField:24 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalTrainingEffect:(FITFloat32)totalTrainingEffect {
    [super setFieldFLOAT32ValueForField:24 andValue:(totalTrainingEffect) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// FirstLapIndex 
- (BOOL)isFirstLapIndexValid {
	const fit::Field* field = [super getField:25];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getFirstLapIndex {
    return ([super getFieldUINT16ValueForField:25 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setFirstLapIndex:(FITUInt16)firstLapIndex {
    [super setFieldUINT16ValueForField:25 andValue:(firstLapIndex) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// NumLaps 
- (BOOL)isNumLapsValid {
	const fit::Field* field = [super getField:26];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getNumLaps {
    return ([super getFieldUINT16ValueForField:26 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setNumLaps:(FITUInt16)numLaps {
    [super setFieldUINT16ValueForField:26 andValue:(numLaps) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EventGroup 
- (BOOL)isEventGroupValid {
	const fit::Field* field = [super getField:27];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getEventGroup {
    return ([super getFieldUINT8ValueForField:27 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEventGroup:(FITUInt8)eventGroup {
    [super setFieldUINT8ValueForField:27 andValue:(eventGroup) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Trigger 
- (BOOL)isTriggerValid {
	const fit::Field* field = [super getField:28];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSessionTrigger)getTrigger {
    return ([super getFieldENUMValueForField:28 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTrigger:(FITSessionTrigger)trigger {
    [super setFieldENUMValueForField:28 andValue:(trigger) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// NecLat 
- (BOOL)isNecLatValid {
	const fit::Field* field = [super getField:29];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt32)getNecLat {
    return ([super getFieldSINT32ValueForField:29 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setNecLat:(FITSInt32)necLat {
    [super setFieldSINT32ValueForField:29 andValue:(necLat) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// NecLong 
- (BOOL)isNecLongValid {
	const fit::Field* field = [super getField:30];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt32)getNecLong {
    return ([super getFieldSINT32ValueForField:30 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setNecLong:(FITSInt32)necLong {
    [super setFieldSINT32ValueForField:30 andValue:(necLong) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SwcLat 
- (BOOL)isSwcLatValid {
	const fit::Field* field = [super getField:31];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt32)getSwcLat {
    return ([super getFieldSINT32ValueForField:31 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSwcLat:(FITSInt32)swcLat {
    [super setFieldSINT32ValueForField:31 andValue:(swcLat) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SwcLong 
- (BOOL)isSwcLongValid {
	const fit::Field* field = [super getField:32];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt32)getSwcLong {
    return ([super getFieldSINT32ValueForField:32 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSwcLong:(FITSInt32)swcLong {
    [super setFieldSINT32ValueForField:32 andValue:(swcLong) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// NumLengths 
- (BOOL)isNumLengthsValid {
	const fit::Field* field = [super getField:33];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getNumLengths {
    return ([super getFieldUINT16ValueForField:33 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setNumLengths:(FITUInt16)numLengths {
    [super setFieldUINT16ValueForField:33 andValue:(numLengths) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// NormalizedPower 
- (BOOL)isNormalizedPowerValid {
	const fit::Field* field = [super getField:34];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getNormalizedPower {
    return ([super getFieldUINT16ValueForField:34 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setNormalizedPower:(FITUInt16)normalizedPower {
    [super setFieldUINT16ValueForField:34 andValue:(normalizedPower) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TrainingStressScore 
- (BOOL)isTrainingStressScoreValid {
	const fit::Field* field = [super getField:35];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTrainingStressScore {
    return ([super getFieldFLOAT32ValueForField:35 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTrainingStressScore:(FITFloat32)trainingStressScore {
    [super setFieldFLOAT32ValueForField:35 andValue:(trainingStressScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// IntensityFactor 
- (BOOL)isIntensityFactorValid {
	const fit::Field* field = [super getField:36];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getIntensityFactor {
    return ([super getFieldFLOAT32ValueForField:36 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setIntensityFactor:(FITFloat32)intensityFactor {
    [super setFieldFLOAT32ValueForField:36 andValue:(intensityFactor) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// LeftRightBalance 
- (BOOL)isLeftRightBalanceValid {
	const fit::Field* field = [super getField:37];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITLeftRightBalance100)getLeftRightBalance {
    return ([super getFieldUINT16ValueForField:37 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setLeftRightBalance:(FITLeftRightBalance100)leftRightBalance {
    [super setFieldUINT16ValueForField:37 andValue:(leftRightBalance) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgStrokeCount 
- (BOOL)isAvgStrokeCountValid {
	const fit::Field* field = [super getField:41];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgStrokeCount {
    return ([super getFieldFLOAT32ValueForField:41 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgStrokeCount:(FITFloat32)avgStrokeCount {
    [super setFieldFLOAT32ValueForField:41 andValue:(avgStrokeCount) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgStrokeDistance 
- (BOOL)isAvgStrokeDistanceValid {
	const fit::Field* field = [super getField:42];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgStrokeDistance {
    return ([super getFieldFLOAT32ValueForField:42 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgStrokeDistance:(FITFloat32)avgStrokeDistance {
    [super setFieldFLOAT32ValueForField:42 andValue:(avgStrokeDistance) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SwimStroke 
- (BOOL)isSwimStrokeValid {
	const fit::Field* field = [super getField:43];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSwimStroke)getSwimStroke {
    return ([super getFieldENUMValueForField:43 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSwimStroke:(FITSwimStroke)swimStroke {
    [super setFieldENUMValueForField:43 andValue:(swimStroke) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// PoolLength 
- (BOOL)isPoolLengthValid {
	const fit::Field* field = [super getField:44];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getPoolLength {
    return ([super getFieldFLOAT32ValueForField:44 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setPoolLength:(FITFloat32)poolLength {
    [super setFieldFLOAT32ValueForField:44 andValue:(poolLength) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// ThresholdPower 
- (BOOL)isThresholdPowerValid {
	const fit::Field* field = [super getField:45];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getThresholdPower {
    return ([super getFieldUINT16ValueForField:45 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setThresholdPower:(FITUInt16)thresholdPower {
    [super setFieldUINT16ValueForField:45 andValue:(thresholdPower) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// PoolLengthUnit 
- (BOOL)isPoolLengthUnitValid {
	const fit::Field* field = [super getField:46];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITDisplayMeasure)getPoolLengthUnit {
    return ([super getFieldENUMValueForField:46 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setPoolLengthUnit:(FITDisplayMeasure)poolLengthUnit {
    [super setFieldENUMValueForField:46 andValue:(poolLengthUnit) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// NumActiveLengths 
- (BOOL)isNumActiveLengthsValid {
	const fit::Field* field = [super getField:47];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getNumActiveLengths {
    return ([super getFieldUINT16ValueForField:47 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setNumActiveLengths:(FITUInt16)numActiveLengths {
    [super setFieldUINT16ValueForField:47 andValue:(numActiveLengths) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalWork 
- (BOOL)isTotalWorkValid {
	const fit::Field* field = [super getField:48];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt32)getTotalWork {
    return ([super getFieldUINT32ValueForField:48 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalWork:(FITUInt32)totalWork {
    [super setFieldUINT32ValueForField:48 andValue:(totalWork) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgAltitude 
- (BOOL)isAvgAltitudeValid {
	const fit::Field* field = [super getField:49];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgAltitude {
    return ([super getFieldFLOAT32ValueForField:49 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgAltitude:(FITFloat32)avgAltitude {
    [super setFieldFLOAT32ValueForField:49 andValue:(avgAltitude) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxAltitude 
- (BOOL)isMaxAltitudeValid {
	const fit::Field* field = [super getField:50];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMaxAltitude {
    return ([super getFieldFLOAT32ValueForField:50 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxAltitude:(FITFloat32)maxAltitude {
    [super setFieldFLOAT32ValueForField:50 andValue:(maxAltitude) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// GpsAccuracy 
- (BOOL)isGpsAccuracyValid {
	const fit::Field* field = [super getField:51];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getGpsAccuracy {
    return ([super getFieldUINT8ValueForField:51 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setGpsAccuracy:(FITUInt8)gpsAccuracy {
    [super setFieldUINT8ValueForField:51 andValue:(gpsAccuracy) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgGrade 
- (BOOL)isAvgGradeValid {
	const fit::Field* field = [super getField:52];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgGrade {
    return ([super getFieldFLOAT32ValueForField:52 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgGrade:(FITFloat32)avgGrade {
    [super setFieldFLOAT32ValueForField:52 andValue:(avgGrade) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgPosGrade 
- (BOOL)isAvgPosGradeValid {
	const fit::Field* field = [super getField:53];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgPosGrade {
    return ([super getFieldFLOAT32ValueForField:53 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgPosGrade:(FITFloat32)avgPosGrade {
    [super setFieldFLOAT32ValueForField:53 andValue:(avgPosGrade) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgNegGrade 
- (BOOL)isAvgNegGradeValid {
	const fit::Field* field = [super getField:54];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgNegGrade {
    return ([super getFieldFLOAT32ValueForField:54 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgNegGrade:(FITFloat32)avgNegGrade {
    [super setFieldFLOAT32ValueForField:54 andValue:(avgNegGrade) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxPosGrade 
- (BOOL)isMaxPosGradeValid {
	const fit::Field* field = [super getField:55];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMaxPosGrade {
    return ([super getFieldFLOAT32ValueForField:55 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxPosGrade:(FITFloat32)maxPosGrade {
    [super setFieldFLOAT32ValueForField:55 andValue:(maxPosGrade) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxNegGrade 
- (BOOL)isMaxNegGradeValid {
	const fit::Field* field = [super getField:56];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMaxNegGrade {
    return ([super getFieldFLOAT32ValueForField:56 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxNegGrade:(FITFloat32)maxNegGrade {
    [super setFieldFLOAT32ValueForField:56 andValue:(maxNegGrade) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgTemperature 
- (BOOL)isAvgTemperatureValid {
	const fit::Field* field = [super getField:57];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt8)getAvgTemperature {
    return ([super getFieldSINT8ValueForField:57 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgTemperature:(FITSInt8)avgTemperature {
    [super setFieldSINT8ValueForField:57 andValue:(avgTemperature) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxTemperature 
- (BOOL)isMaxTemperatureValid {
	const fit::Field* field = [super getField:58];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt8)getMaxTemperature {
    return ([super getFieldSINT8ValueForField:58 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxTemperature:(FITSInt8)maxTemperature {
    [super setFieldSINT8ValueForField:58 andValue:(maxTemperature) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalMovingTime 
- (BOOL)isTotalMovingTimeValid {
	const fit::Field* field = [super getField:59];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalMovingTime {
    return ([super getFieldFLOAT32ValueForField:59 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalMovingTime:(FITFloat32)totalMovingTime {
    [super setFieldFLOAT32ValueForField:59 andValue:(totalMovingTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgPosVerticalSpeed 
- (BOOL)isAvgPosVerticalSpeedValid {
	const fit::Field* field = [super getField:60];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgPosVerticalSpeed {
    return ([super getFieldFLOAT32ValueForField:60 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgPosVerticalSpeed:(FITFloat32)avgPosVerticalSpeed {
    [super setFieldFLOAT32ValueForField:60 andValue:(avgPosVerticalSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgNegVerticalSpeed 
- (BOOL)isAvgNegVerticalSpeedValid {
	const fit::Field* field = [super getField:61];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgNegVerticalSpeed {
    return ([super getFieldFLOAT32ValueForField:61 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgNegVerticalSpeed:(FITFloat32)avgNegVerticalSpeed {
    [super setFieldFLOAT32ValueForField:61 andValue:(avgNegVerticalSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxPosVerticalSpeed 
- (BOOL)isMaxPosVerticalSpeedValid {
	const fit::Field* field = [super getField:62];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMaxPosVerticalSpeed {
    return ([super getFieldFLOAT32ValueForField:62 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxPosVerticalSpeed:(FITFloat32)maxPosVerticalSpeed {
    [super setFieldFLOAT32ValueForField:62 andValue:(maxPosVerticalSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxNegVerticalSpeed 
- (BOOL)isMaxNegVerticalSpeedValid {
	const fit::Field* field = [super getField:63];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMaxNegVerticalSpeed {
    return ([super getFieldFLOAT32ValueForField:63 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxNegVerticalSpeed:(FITFloat32)maxNegVerticalSpeed {
    [super setFieldFLOAT32ValueForField:63 andValue:(maxNegVerticalSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MinHeartRate 
- (BOOL)isMinHeartRateValid {
	const fit::Field* field = [super getField:64];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getMinHeartRate {
    return ([super getFieldUINT8ValueForField:64 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMinHeartRate:(FITUInt8)minHeartRate {
    [super setFieldUINT8ValueForField:64 andValue:(minHeartRate) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TimeInHrZone 
- (uint8_t)numTimeInHrZoneValues {
    return [super getFieldNumValuesForField:65 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isTimeInHrZoneValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:65];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTimeInHrZoneforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:65 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTimeInHrZone:(FITFloat32)timeInHrZone forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:65 andValue:(timeInHrZone) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TimeInSpeedZone 
- (uint8_t)numTimeInSpeedZoneValues {
    return [super getFieldNumValuesForField:66 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isTimeInSpeedZoneValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:66];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTimeInSpeedZoneforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:66 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTimeInSpeedZone:(FITFloat32)timeInSpeedZone forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:66 andValue:(timeInSpeedZone) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TimeInCadenceZone 
- (uint8_t)numTimeInCadenceZoneValues {
    return [super getFieldNumValuesForField:67 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isTimeInCadenceZoneValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:67];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTimeInCadenceZoneforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:67 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTimeInCadenceZone:(FITFloat32)timeInCadenceZone forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:67 andValue:(timeInCadenceZone) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TimeInPowerZone 
- (uint8_t)numTimeInPowerZoneValues {
    return [super getFieldNumValuesForField:68 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isTimeInPowerZoneValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:68];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTimeInPowerZoneforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:68 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTimeInPowerZone:(FITFloat32)timeInPowerZone forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:68 andValue:(timeInPowerZone) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgLapTime 
- (BOOL)isAvgLapTimeValid {
	const fit::Field* field = [super getField:69];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgLapTime {
    return ([super getFieldFLOAT32ValueForField:69 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgLapTime:(FITFloat32)avgLapTime {
    [super setFieldFLOAT32ValueForField:69 andValue:(avgLapTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// BestLapIndex 
- (BOOL)isBestLapIndexValid {
	const fit::Field* field = [super getField:70];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getBestLapIndex {
    return ([super getFieldUINT16ValueForField:70 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setBestLapIndex:(FITUInt16)bestLapIndex {
    [super setFieldUINT16ValueForField:70 andValue:(bestLapIndex) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MinAltitude 
- (BOOL)isMinAltitudeValid {
	const fit::Field* field = [super getField:71];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMinAltitude {
    return ([super getFieldFLOAT32ValueForField:71 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMinAltitude:(FITFloat32)minAltitude {
    [super setFieldFLOAT32ValueForField:71 andValue:(minAltitude) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// PlayerScore 
- (BOOL)isPlayerScoreValid {
	const fit::Field* field = [super getField:82];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getPlayerScore {
    return ([super getFieldUINT16ValueForField:82 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setPlayerScore:(FITUInt16)playerScore {
    [super setFieldUINT16ValueForField:82 andValue:(playerScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// OpponentScore 
- (BOOL)isOpponentScoreValid {
	const fit::Field* field = [super getField:83];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getOpponentScore {
    return ([super getFieldUINT16ValueForField:83 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setOpponentScore:(FITUInt16)opponentScore {
    [super setFieldUINT16ValueForField:83 andValue:(opponentScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// OpponentName 
- (BOOL)isOpponentNameValid {
	const fit::Field* field = [super getField:84];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (NSString *)getOpponentName {
    return ([super getFieldSTRINGValueForField:84 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setOpponentName:(NSString *)opponentName {
    [super setFieldSTRINGValueForField:84 andValue:(opponentName) forIndex:0];
} 

// StrokeCount 
- (uint8_t)numStrokeCountValues {
    return [super getFieldNumValuesForField:85 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isStrokeCountValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:85];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getStrokeCountforIndex:(uint8_t)index {
    return ([super getFieldUINT16ValueForField:85 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setStrokeCount:(FITUInt16)strokeCount forIndex:(uint8_t)index {
    [super setFieldUINT16ValueForField:85 andValue:(strokeCount) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// ZoneCount 
- (uint8_t)numZoneCountValues {
    return [super getFieldNumValuesForField:86 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isZoneCountValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:86];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getZoneCountforIndex:(uint8_t)index {
    return ([super getFieldUINT16ValueForField:86 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setZoneCount:(FITUInt16)zoneCount forIndex:(uint8_t)index {
    [super setFieldUINT16ValueForField:86 andValue:(zoneCount) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxBallSpeed 
- (BOOL)isMaxBallSpeedValid {
	const fit::Field* field = [super getField:87];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMaxBallSpeed {
    return ([super getFieldFLOAT32ValueForField:87 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxBallSpeed:(FITFloat32)maxBallSpeed {
    [super setFieldFLOAT32ValueForField:87 andValue:(maxBallSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgBallSpeed 
- (BOOL)isAvgBallSpeedValid {
	const fit::Field* field = [super getField:88];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgBallSpeed {
    return ([super getFieldFLOAT32ValueForField:88 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgBallSpeed:(FITFloat32)avgBallSpeed {
    [super setFieldFLOAT32ValueForField:88 andValue:(avgBallSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgVerticalOscillation 
- (BOOL)isAvgVerticalOscillationValid {
	const fit::Field* field = [super getField:89];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgVerticalOscillation {
    return ([super getFieldFLOAT32ValueForField:89 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgVerticalOscillation:(FITFloat32)avgVerticalOscillation {
    [super setFieldFLOAT32ValueForField:89 andValue:(avgVerticalOscillation) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgStanceTimePercent 
- (BOOL)isAvgStanceTimePercentValid {
	const fit::Field* field = [super getField:90];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgStanceTimePercent {
    return ([super getFieldFLOAT32ValueForField:90 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgStanceTimePercent:(FITFloat32)avgStanceTimePercent {
    [super setFieldFLOAT32ValueForField:90 andValue:(avgStanceTimePercent) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgStanceTime 
- (BOOL)isAvgStanceTimeValid {
	const fit::Field* field = [super getField:91];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgStanceTime {
    return ([super getFieldFLOAT32ValueForField:91 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgStanceTime:(FITFloat32)avgStanceTime {
    [super setFieldFLOAT32ValueForField:91 andValue:(avgStanceTime) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgFractionalCadence 
- (BOOL)isAvgFractionalCadenceValid {
	const fit::Field* field = [super getField:92];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgFractionalCadence {
    return ([super getFieldFLOAT32ValueForField:92 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgFractionalCadence:(FITFloat32)avgFractionalCadence {
    [super setFieldFLOAT32ValueForField:92 andValue:(avgFractionalCadence) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxFractionalCadence 
- (BOOL)isMaxFractionalCadenceValid {
	const fit::Field* field = [super getField:93];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMaxFractionalCadence {
    return ([super getFieldFLOAT32ValueForField:93 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxFractionalCadence:(FITFloat32)maxFractionalCadence {
    [super setFieldFLOAT32ValueForField:93 andValue:(maxFractionalCadence) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalFractionalCycles 
- (BOOL)isTotalFractionalCyclesValid {
	const fit::Field* field = [super getField:94];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalFractionalCycles {
    return ([super getFieldFLOAT32ValueForField:94 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalFractionalCycles:(FITFloat32)totalFractionalCycles {
    [super setFieldFLOAT32ValueForField:94 andValue:(totalFractionalCycles) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgTotalHemoglobinConc 
- (uint8_t)numAvgTotalHemoglobinConcValues {
    return [super getFieldNumValuesForField:95 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isAvgTotalHemoglobinConcValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:95];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgTotalHemoglobinConcforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:95 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgTotalHemoglobinConc:(FITFloat32)avgTotalHemoglobinConc forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:95 andValue:(avgTotalHemoglobinConc) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MinTotalHemoglobinConc 
- (uint8_t)numMinTotalHemoglobinConcValues {
    return [super getFieldNumValuesForField:96 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isMinTotalHemoglobinConcValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:96];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMinTotalHemoglobinConcforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:96 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMinTotalHemoglobinConc:(FITFloat32)minTotalHemoglobinConc forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:96 andValue:(minTotalHemoglobinConc) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxTotalHemoglobinConc 
- (uint8_t)numMaxTotalHemoglobinConcValues {
    return [super getFieldNumValuesForField:97 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isMaxTotalHemoglobinConcValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:97];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMaxTotalHemoglobinConcforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:97 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxTotalHemoglobinConc:(FITFloat32)maxTotalHemoglobinConc forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:97 andValue:(maxTotalHemoglobinConc) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgSaturatedHemoglobinPercent 
- (uint8_t)numAvgSaturatedHemoglobinPercentValues {
    return [super getFieldNumValuesForField:98 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isAvgSaturatedHemoglobinPercentValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:98];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgSaturatedHemoglobinPercentforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:98 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgSaturatedHemoglobinPercent:(FITFloat32)avgSaturatedHemoglobinPercent forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:98 andValue:(avgSaturatedHemoglobinPercent) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MinSaturatedHemoglobinPercent 
- (uint8_t)numMinSaturatedHemoglobinPercentValues {
    return [super getFieldNumValuesForField:99 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isMinSaturatedHemoglobinPercentValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:99];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMinSaturatedHemoglobinPercentforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:99 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMinSaturatedHemoglobinPercent:(FITFloat32)minSaturatedHemoglobinPercent forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:99 andValue:(minSaturatedHemoglobinPercent) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxSaturatedHemoglobinPercent 
- (uint8_t)numMaxSaturatedHemoglobinPercentValues {
    return [super getFieldNumValuesForField:100 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isMaxSaturatedHemoglobinPercentValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:100];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMaxSaturatedHemoglobinPercentforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:100 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxSaturatedHemoglobinPercent:(FITFloat32)maxSaturatedHemoglobinPercent forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:100 andValue:(maxSaturatedHemoglobinPercent) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgLeftTorqueEffectiveness 
- (BOOL)isAvgLeftTorqueEffectivenessValid {
	const fit::Field* field = [super getField:101];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgLeftTorqueEffectiveness {
    return ([super getFieldFLOAT32ValueForField:101 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgLeftTorqueEffectiveness:(FITFloat32)avgLeftTorqueEffectiveness {
    [super setFieldFLOAT32ValueForField:101 andValue:(avgLeftTorqueEffectiveness) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgRightTorqueEffectiveness 
- (BOOL)isAvgRightTorqueEffectivenessValid {
	const fit::Field* field = [super getField:102];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgRightTorqueEffectiveness {
    return ([super getFieldFLOAT32ValueForField:102 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgRightTorqueEffectiveness:(FITFloat32)avgRightTorqueEffectiveness {
    [super setFieldFLOAT32ValueForField:102 andValue:(avgRightTorqueEffectiveness) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgLeftPedalSmoothness 
- (BOOL)isAvgLeftPedalSmoothnessValid {
	const fit::Field* field = [super getField:103];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgLeftPedalSmoothness {
    return ([super getFieldFLOAT32ValueForField:103 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgLeftPedalSmoothness:(FITFloat32)avgLeftPedalSmoothness {
    [super setFieldFLOAT32ValueForField:103 andValue:(avgLeftPedalSmoothness) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgRightPedalSmoothness 
- (BOOL)isAvgRightPedalSmoothnessValid {
	const fit::Field* field = [super getField:104];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgRightPedalSmoothness {
    return ([super getFieldFLOAT32ValueForField:104 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgRightPedalSmoothness:(FITFloat32)avgRightPedalSmoothness {
    [super setFieldFLOAT32ValueForField:104 andValue:(avgRightPedalSmoothness) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgCombinedPedalSmoothness 
- (BOOL)isAvgCombinedPedalSmoothnessValid {
	const fit::Field* field = [super getField:105];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgCombinedPedalSmoothness {
    return ([super getFieldFLOAT32ValueForField:105 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgCombinedPedalSmoothness:(FITFloat32)avgCombinedPedalSmoothness {
    [super setFieldFLOAT32ValueForField:105 andValue:(avgCombinedPedalSmoothness) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SportIndex 
- (BOOL)isSportIndexValid {
	const fit::Field* field = [super getField:111];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getSportIndex {
    return ([super getFieldUINT8ValueForField:111 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSportIndex:(FITUInt8)sportIndex {
    [super setFieldUINT8ValueForField:111 andValue:(sportIndex) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TimeStanding 
- (BOOL)isTimeStandingValid {
	const fit::Field* field = [super getField:112];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTimeStanding {
    return ([super getFieldFLOAT32ValueForField:112 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTimeStanding:(FITFloat32)timeStanding {
    [super setFieldFLOAT32ValueForField:112 andValue:(timeStanding) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// StandCount 
- (BOOL)isStandCountValid {
	const fit::Field* field = [super getField:113];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getStandCount {
    return ([super getFieldUINT16ValueForField:113 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setStandCount:(FITUInt16)standCount {
    [super setFieldUINT16ValueForField:113 andValue:(standCount) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgLeftPco 
- (BOOL)isAvgLeftPcoValid {
	const fit::Field* field = [super getField:114];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt8)getAvgLeftPco {
    return ([super getFieldSINT8ValueForField:114 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgLeftPco:(FITSInt8)avgLeftPco {
    [super setFieldSINT8ValueForField:114 andValue:(avgLeftPco) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgRightPco 
- (BOOL)isAvgRightPcoValid {
	const fit::Field* field = [super getField:115];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITSInt8)getAvgRightPco {
    return ([super getFieldSINT8ValueForField:115 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgRightPco:(FITSInt8)avgRightPco {
    [super setFieldSINT8ValueForField:115 andValue:(avgRightPco) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgLeftPowerPhase 
- (uint8_t)numAvgLeftPowerPhaseValues {
    return [super getFieldNumValuesForField:116 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isAvgLeftPowerPhaseValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:116];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgLeftPowerPhaseforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:116 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgLeftPowerPhase:(FITFloat32)avgLeftPowerPhase forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:116 andValue:(avgLeftPowerPhase) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgLeftPowerPhasePeak 
- (uint8_t)numAvgLeftPowerPhasePeakValues {
    return [super getFieldNumValuesForField:117 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isAvgLeftPowerPhasePeakValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:117];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgLeftPowerPhasePeakforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:117 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgLeftPowerPhasePeak:(FITFloat32)avgLeftPowerPhasePeak forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:117 andValue:(avgLeftPowerPhasePeak) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgRightPowerPhase 
- (uint8_t)numAvgRightPowerPhaseValues {
    return [super getFieldNumValuesForField:118 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isAvgRightPowerPhaseValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:118];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgRightPowerPhaseforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:118 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgRightPowerPhase:(FITFloat32)avgRightPowerPhase forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:118 andValue:(avgRightPowerPhase) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgRightPowerPhasePeak 
- (uint8_t)numAvgRightPowerPhasePeakValues {
    return [super getFieldNumValuesForField:119 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isAvgRightPowerPhasePeakValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:119];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgRightPowerPhasePeakforIndex:(uint8_t)index {
    return ([super getFieldFLOAT32ValueForField:119 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgRightPowerPhasePeak:(FITFloat32)avgRightPowerPhasePeak forIndex:(uint8_t)index {
    [super setFieldFLOAT32ValueForField:119 andValue:(avgRightPowerPhasePeak) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgPowerPosition 
- (uint8_t)numAvgPowerPositionValues {
    return [super getFieldNumValuesForField:120 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isAvgPowerPositionValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:120];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getAvgPowerPositionforIndex:(uint8_t)index {
    return ([super getFieldUINT16ValueForField:120 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgPowerPosition:(FITUInt16)avgPowerPosition forIndex:(uint8_t)index {
    [super setFieldUINT16ValueForField:120 andValue:(avgPowerPosition) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxPowerPosition 
- (uint8_t)numMaxPowerPositionValues {
    return [super getFieldNumValuesForField:121 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isMaxPowerPositionValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:121];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getMaxPowerPositionforIndex:(uint8_t)index {
    return ([super getFieldUINT16ValueForField:121 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxPowerPosition:(FITUInt16)maxPowerPosition forIndex:(uint8_t)index {
    [super setFieldUINT16ValueForField:121 andValue:(maxPowerPosition) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgCadencePosition 
- (uint8_t)numAvgCadencePositionValues {
    return [super getFieldNumValuesForField:122 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isAvgCadencePositionValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:122];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getAvgCadencePositionforIndex:(uint8_t)index {
    return ([super getFieldUINT8ValueForField:122 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgCadencePosition:(FITUInt8)avgCadencePosition forIndex:(uint8_t)index {
    [super setFieldUINT8ValueForField:122 andValue:(avgCadencePosition) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxCadencePosition 
- (uint8_t)numMaxCadencePositionValues {
    return [super getFieldNumValuesForField:123 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isMaxCadencePositionValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:123];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getMaxCadencePositionforIndex:(uint8_t)index {
    return ([super getFieldUINT8ValueForField:123 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxCadencePosition:(FITUInt8)maxCadencePosition forIndex:(uint8_t)index {
    [super setFieldUINT8ValueForField:123 andValue:(maxCadencePosition) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EnhancedAvgSpeed 
- (BOOL)isEnhancedAvgSpeedValid {
	const fit::Field* field = [super getField:124];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getEnhancedAvgSpeed {
    return ([super getFieldFLOAT32ValueForField:124 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEnhancedAvgSpeed:(FITFloat32)enhancedAvgSpeed {
    [super setFieldFLOAT32ValueForField:124 andValue:(enhancedAvgSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EnhancedMaxSpeed 
- (BOOL)isEnhancedMaxSpeedValid {
	const fit::Field* field = [super getField:125];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getEnhancedMaxSpeed {
    return ([super getFieldFLOAT32ValueForField:125 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEnhancedMaxSpeed:(FITFloat32)enhancedMaxSpeed {
    [super setFieldFLOAT32ValueForField:125 andValue:(enhancedMaxSpeed) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EnhancedAvgAltitude 
- (BOOL)isEnhancedAvgAltitudeValid {
	const fit::Field* field = [super getField:126];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getEnhancedAvgAltitude {
    return ([super getFieldFLOAT32ValueForField:126 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEnhancedAvgAltitude:(FITFloat32)enhancedAvgAltitude {
    [super setFieldFLOAT32ValueForField:126 andValue:(enhancedAvgAltitude) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EnhancedMinAltitude 
- (BOOL)isEnhancedMinAltitudeValid {
	const fit::Field* field = [super getField:127];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getEnhancedMinAltitude {
    return ([super getFieldFLOAT32ValueForField:127 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEnhancedMinAltitude:(FITFloat32)enhancedMinAltitude {
    [super setFieldFLOAT32ValueForField:127 andValue:(enhancedMinAltitude) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// EnhancedMaxAltitude 
- (BOOL)isEnhancedMaxAltitudeValid {
	const fit::Field* field = [super getField:128];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getEnhancedMaxAltitude {
    return ([super getFieldFLOAT32ValueForField:128 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setEnhancedMaxAltitude:(FITFloat32)enhancedMaxAltitude {
    [super setFieldFLOAT32ValueForField:128 andValue:(enhancedMaxAltitude) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgLevMotorPower 
- (BOOL)isAvgLevMotorPowerValid {
	const fit::Field* field = [super getField:129];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getAvgLevMotorPower {
    return ([super getFieldUINT16ValueForField:129 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgLevMotorPower:(FITUInt16)avgLevMotorPower {
    [super setFieldUINT16ValueForField:129 andValue:(avgLevMotorPower) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxLevMotorPower 
- (BOOL)isMaxLevMotorPowerValid {
	const fit::Field* field = [super getField:130];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getMaxLevMotorPower {
    return ([super getFieldUINT16ValueForField:130 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxLevMotorPower:(FITUInt16)maxLevMotorPower {
    [super setFieldUINT16ValueForField:130 andValue:(maxLevMotorPower) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// LevBatteryConsumption 
- (BOOL)isLevBatteryConsumptionValid {
	const fit::Field* field = [super getField:131];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getLevBatteryConsumption {
    return ([super getFieldFLOAT32ValueForField:131 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setLevBatteryConsumption:(FITFloat32)levBatteryConsumption {
    [super setFieldFLOAT32ValueForField:131 andValue:(levBatteryConsumption) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgVerticalRatio 
- (BOOL)isAvgVerticalRatioValid {
	const fit::Field* field = [super getField:132];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgVerticalRatio {
    return ([super getFieldFLOAT32ValueForField:132 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgVerticalRatio:(FITFloat32)avgVerticalRatio {
    [super setFieldFLOAT32ValueForField:132 andValue:(avgVerticalRatio) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgStanceTimeBalance 
- (BOOL)isAvgStanceTimeBalanceValid {
	const fit::Field* field = [super getField:133];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgStanceTimeBalance {
    return ([super getFieldFLOAT32ValueForField:133 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgStanceTimeBalance:(FITFloat32)avgStanceTimeBalance {
    [super setFieldFLOAT32ValueForField:133 andValue:(avgStanceTimeBalance) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgStepLength 
- (BOOL)isAvgStepLengthValid {
	const fit::Field* field = [super getField:134];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgStepLength {
    return ([super getFieldFLOAT32ValueForField:134 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgStepLength:(FITFloat32)avgStepLength {
    [super setFieldFLOAT32ValueForField:134 andValue:(avgStepLength) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalAnaerobicTrainingEffect 
- (BOOL)isTotalAnaerobicTrainingEffectValid {
	const fit::Field* field = [super getField:137];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalAnaerobicTrainingEffect {
    return ([super getFieldFLOAT32ValueForField:137 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalAnaerobicTrainingEffect:(FITFloat32)totalAnaerobicTrainingEffect {
    [super setFieldFLOAT32ValueForField:137 andValue:(totalAnaerobicTrainingEffect) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgVam 
- (BOOL)isAvgVamValid {
	const fit::Field* field = [super getField:139];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgVam {
    return ([super getFieldFLOAT32ValueForField:139 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgVam:(FITFloat32)avgVam {
    [super setFieldFLOAT32ValueForField:139 andValue:(avgVam) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TrainingLoadPeak 
- (BOOL)isTrainingLoadPeakValid {
	const fit::Field* field = [super getField:168];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTrainingLoadPeak {
    return ([super getFieldFLOAT32ValueForField:168 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTrainingLoadPeak:(FITFloat32)trainingLoadPeak {
    [super setFieldFLOAT32ValueForField:168 andValue:(trainingLoadPeak) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalGrit 
- (BOOL)isTotalGritValid {
	const fit::Field* field = [super getField:181];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalGrit {
    return ([super getFieldFLOAT32ValueForField:181 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalGrit:(FITFloat32)totalGrit {
    [super setFieldFLOAT32ValueForField:181 andValue:(totalGrit) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalFlow 
- (BOOL)isTotalFlowValid {
	const fit::Field* field = [super getField:182];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalFlow {
    return ([super getFieldFLOAT32ValueForField:182 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalFlow:(FITFloat32)totalFlow {
    [super setFieldFLOAT32ValueForField:182 andValue:(totalFlow) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// JumpCount 
- (BOOL)isJumpCountValid {
	const fit::Field* field = [super getField:183];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getJumpCount {
    return ([super getFieldUINT16ValueForField:183 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setJumpCount:(FITUInt16)jumpCount {
    [super setFieldUINT16ValueForField:183 andValue:(jumpCount) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgGrit 
- (BOOL)isAvgGritValid {
	const fit::Field* field = [super getField:186];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgGrit {
    return ([super getFieldFLOAT32ValueForField:186 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgGrit:(FITFloat32)avgGrit {
    [super setFieldFLOAT32ValueForField:186 andValue:(avgGrit) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgFlow 
- (BOOL)isAvgFlowValid {
	const fit::Field* field = [super getField:187];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgFlow {
    return ([super getFieldFLOAT32ValueForField:187 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgFlow:(FITFloat32)avgFlow {
    [super setFieldFLOAT32ValueForField:187 andValue:(avgFlow) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalFractionalAscent 
- (BOOL)isTotalFractionalAscentValid {
	const fit::Field* field = [super getField:199];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalFractionalAscent {
    return ([super getFieldFLOAT32ValueForField:199 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalFractionalAscent:(FITFloat32)totalFractionalAscent {
    [super setFieldFLOAT32ValueForField:199 andValue:(totalFractionalAscent) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// TotalFractionalDescent 
- (BOOL)isTotalFractionalDescentValid {
	const fit::Field* field = [super getField:200];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getTotalFractionalDescent {
    return ([super getFieldFLOAT32ValueForField:200 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setTotalFractionalDescent:(FITFloat32)totalFractionalDescent {
    [super setFieldFLOAT32ValueForField:200 andValue:(totalFractionalDescent) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AvgCoreTemperature 
- (BOOL)isAvgCoreTemperatureValid {
	const fit::Field* field = [super getField:208];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAvgCoreTemperature {
    return ([super getFieldFLOAT32ValueForField:208 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAvgCoreTemperature:(FITFloat32)avgCoreTemperature {
    [super setFieldFLOAT32ValueForField:208 andValue:(avgCoreTemperature) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MinCoreTemperature 
- (BOOL)isMinCoreTemperatureValid {
	const fit::Field* field = [super getField:209];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMinCoreTemperature {
    return ([super getFieldFLOAT32ValueForField:209 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMinCoreTemperature:(FITFloat32)minCoreTemperature {
    [super setFieldFLOAT32ValueForField:209 andValue:(minCoreTemperature) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MaxCoreTemperature 
- (BOOL)isMaxCoreTemperatureValid {
	const fit::Field* field = [super getField:210];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getMaxCoreTemperature {
    return ([super getFieldFLOAT32ValueForField:210 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMaxCoreTemperature:(FITFloat32)maxCoreTemperature {
    [super setFieldFLOAT32ValueForField:210 andValue:(maxCoreTemperature) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

@end
