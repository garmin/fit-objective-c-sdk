/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2022 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.94Release
// Tag = production/akw/21.94.00-0-g0f668193
/////////////////////////////////////////////////////////////////////////////////////////////


#import "FITMessage+Internal.h"


#import "FITCapabilitiesMesg.h"

@implementation FITCapabilitiesMesg

- (instancetype)init {
    self = [super initWithFitMesgIndex:fit::Profile::MESG_CAPABILITIES];

    return self;
}

// Languages 
- (uint8_t)numLanguagesValues {
    return [super getFieldNumValuesForField:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isLanguagesValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:0];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8z)getLanguagesforIndex:(uint8_t)index {
    return ([super getFieldUINT8ZValueForField:0 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setLanguages:(FITUInt8z)languages forIndex:(uint8_t)index {
    [super setFieldUINT8ZValueForField:0 andValue:(languages) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Sports 
- (uint8_t)numSportsValues {
    return [super getFieldNumValuesForField:1 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
}

- (BOOL)isSportsValidforIndex:(uint8_t)index {
	const fit::Field* field = [super getField:1];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid(index) == FIT_TRUE ? TRUE : FALSE;
}

- (FITSportBits0)getSportsforIndex:(uint8_t)index {
    return ([super getFieldUINT8ZValueForField:1 forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSports:(FITSportBits0)sports forIndex:(uint8_t)index {
    [super setFieldUINT8ZValueForField:1 andValue:(sports) forIndex:index andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// WorkoutsSupported 
- (BOOL)isWorkoutsSupportedValid {
	const fit::Field* field = [super getField:21];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITWorkoutCapabilities)getWorkoutsSupported {
    return ([super getFieldUINT32ZValueForField:21 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setWorkoutsSupported:(FITWorkoutCapabilities)workoutsSupported {
    [super setFieldUINT32ZValueForField:21 andValue:(workoutsSupported) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// ConnectivitySupported 
- (BOOL)isConnectivitySupportedValid {
	const fit::Field* field = [super getField:23];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITConnectivityCapabilities)getConnectivitySupported {
    return ([super getFieldUINT32ZValueForField:23 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setConnectivitySupported:(FITConnectivityCapabilities)connectivitySupported {
    [super setFieldUINT32ZValueForField:23 andValue:(connectivitySupported) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

@end
