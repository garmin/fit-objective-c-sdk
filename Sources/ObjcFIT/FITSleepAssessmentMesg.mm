/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.141.0Release
// Tag = production/release/21.141.0-0-g2aa27e1
/////////////////////////////////////////////////////////////////////////////////////////////


#import "FITMessage+Internal.h"


#import "FITSleepAssessmentMesg.h"

@implementation FITSleepAssessmentMesg

- (instancetype)init {
    self = [super initWithFitMesgIndex:fit::Profile::MESG_SLEEP_ASSESSMENT];

    return self;
}

// CombinedAwakeScore 
- (BOOL)isCombinedAwakeScoreValid {
	const fit::Field* field = [super getField:0];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getCombinedAwakeScore {
    return ([super getFieldUINT8ValueForField:0 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCombinedAwakeScore:(FITUInt8)combinedAwakeScore {
    [super setFieldUINT8ValueForField:0 andValue:(combinedAwakeScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AwakeTimeScore 
- (BOOL)isAwakeTimeScoreValid {
	const fit::Field* field = [super getField:1];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getAwakeTimeScore {
    return ([super getFieldUINT8ValueForField:1 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAwakeTimeScore:(FITUInt8)awakeTimeScore {
    [super setFieldUINT8ValueForField:1 andValue:(awakeTimeScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AwakeningsCountScore 
- (BOOL)isAwakeningsCountScoreValid {
	const fit::Field* field = [super getField:2];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getAwakeningsCountScore {
    return ([super getFieldUINT8ValueForField:2 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAwakeningsCountScore:(FITUInt8)awakeningsCountScore {
    [super setFieldUINT8ValueForField:2 andValue:(awakeningsCountScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// DeepSleepScore 
- (BOOL)isDeepSleepScoreValid {
	const fit::Field* field = [super getField:3];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getDeepSleepScore {
    return ([super getFieldUINT8ValueForField:3 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setDeepSleepScore:(FITUInt8)deepSleepScore {
    [super setFieldUINT8ValueForField:3 andValue:(deepSleepScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SleepDurationScore 
- (BOOL)isSleepDurationScoreValid {
	const fit::Field* field = [super getField:4];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getSleepDurationScore {
    return ([super getFieldUINT8ValueForField:4 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSleepDurationScore:(FITUInt8)sleepDurationScore {
    [super setFieldUINT8ValueForField:4 andValue:(sleepDurationScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// LightSleepScore 
- (BOOL)isLightSleepScoreValid {
	const fit::Field* field = [super getField:5];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getLightSleepScore {
    return ([super getFieldUINT8ValueForField:5 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setLightSleepScore:(FITUInt8)lightSleepScore {
    [super setFieldUINT8ValueForField:5 andValue:(lightSleepScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// OverallSleepScore 
- (BOOL)isOverallSleepScoreValid {
	const fit::Field* field = [super getField:6];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getOverallSleepScore {
    return ([super getFieldUINT8ValueForField:6 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setOverallSleepScore:(FITUInt8)overallSleepScore {
    [super setFieldUINT8ValueForField:6 andValue:(overallSleepScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SleepQualityScore 
- (BOOL)isSleepQualityScoreValid {
	const fit::Field* field = [super getField:7];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getSleepQualityScore {
    return ([super getFieldUINT8ValueForField:7 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSleepQualityScore:(FITUInt8)sleepQualityScore {
    [super setFieldUINT8ValueForField:7 andValue:(sleepQualityScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SleepRecoveryScore 
- (BOOL)isSleepRecoveryScoreValid {
	const fit::Field* field = [super getField:8];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getSleepRecoveryScore {
    return ([super getFieldUINT8ValueForField:8 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSleepRecoveryScore:(FITUInt8)sleepRecoveryScore {
    [super setFieldUINT8ValueForField:8 andValue:(sleepRecoveryScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// RemSleepScore 
- (BOOL)isRemSleepScoreValid {
	const fit::Field* field = [super getField:9];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getRemSleepScore {
    return ([super getFieldUINT8ValueForField:9 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setRemSleepScore:(FITUInt8)remSleepScore {
    [super setFieldUINT8ValueForField:9 andValue:(remSleepScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// SleepRestlessnessScore 
- (BOOL)isSleepRestlessnessScoreValid {
	const fit::Field* field = [super getField:10];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getSleepRestlessnessScore {
    return ([super getFieldUINT8ValueForField:10 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setSleepRestlessnessScore:(FITUInt8)sleepRestlessnessScore {
    [super setFieldUINT8ValueForField:10 andValue:(sleepRestlessnessScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AwakeningsCount 
- (BOOL)isAwakeningsCountValid {
	const fit::Field* field = [super getField:11];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getAwakeningsCount {
    return ([super getFieldUINT8ValueForField:11 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAwakeningsCount:(FITUInt8)awakeningsCount {
    [super setFieldUINT8ValueForField:11 andValue:(awakeningsCount) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// InterruptionsScore 
- (BOOL)isInterruptionsScoreValid {
	const fit::Field* field = [super getField:14];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt8)getInterruptionsScore {
    return ([super getFieldUINT8ValueForField:14 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setInterruptionsScore:(FITUInt8)interruptionsScore {
    [super setFieldUINT8ValueForField:14 andValue:(interruptionsScore) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// AverageStressDuringSleep 
- (BOOL)isAverageStressDuringSleepValid {
	const fit::Field* field = [super getField:15];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFloat32)getAverageStressDuringSleep {
    return ([super getFieldFLOAT32ValueForField:15 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setAverageStressDuringSleep:(FITFloat32)averageStressDuringSleep {
    [super setFieldFLOAT32ValueForField:15 andValue:(averageStressDuringSleep) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

@end
