/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2022 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.94Release
// Tag = production/akw/21.94.00-0-g0f668193
/////////////////////////////////////////////////////////////////////////////////////////////


#import "FITMessage+Internal.h"
#import "FITDeveloperFieldDef+Internal.h"
#import "FITString.h"

#import <fit_mesg.hpp>
#import <fit_developer_field_definition.hpp>

@interface FITMessage ()
@property(nonatomic, assign) fit::Mesg *message;
@end

@implementation FITMessage
- (instancetype)init {
    self = [super init];
    if (self) {
        _message = new fit::Mesg(FIT_NULL);
    }
    return self;
}

- (instancetype)initWithMessage:(FITMessage *) message {
    self = [super init];
    if (self) {
        _message = new fit::Mesg(*[message getInternalFitMesg]);
    }
    return self;
}

- (instancetype)initWithFitMesgIndex:(fit::Profile::MESG_INDEX)index {
    self = [super init];
    if (self) {
        _message = new fit::Mesg(index);
    }
    return self;
}

- (instancetype)initWithFitMesg:(fit::Mesg *)fit_mesg {
    self = [super init];
    if (self) {
        _message = new fit::Mesg(*fit_mesg);
    }
    return self;
}

- (void)dealloc {
    delete _message;
    _message = nullptr;
}

- (fit::Mesg *)getInternalFitMesg {
    return _message;
}

- (fit::Field *)getField:(FIT_UINT8)fieldNum {
    if(_message == nil) {
        return nil;
    }
    return _message->GetField(fieldNum);
}

-(FITMesgNum)getNum {
    if(_message == nil) {
        return FITMesgNumInvalid;
    }
    return (FITMesgNum)_message->GetNum();
}

-(FITUInt8) getFieldNumValuesForField:(FITUInt8)fieldNum andSubFieldIndex:(FITUInt16) subFieldIndex {
   if(_message == nil) {
        return FITUInt8Invalid;
   }

   return _message->GetFieldNumValues(fieldNum,subFieldIndex);
}

-(FITBool) canField:(FITUInt8)fieldNum supportSubField:(FITUInt16)subFieldIndex {
    if(_message == nil) {
        return FITBoolFalse;
    }

    return _message->CanSupportSubField(fieldNum,subFieldIndex);
}

-(void)addDeveloperField:(FITDeveloperField *)developerField {
    if(_message == nil) {
        return;
    }

    fit::DeveloperField *developer_field = [developerField fit_developer_field];
    _message->AddDeveloperField(*developer_field);
}

-(NSArray*)getDeveloperFields {
    NSMutableArray *developerFields = [[NSMutableArray alloc] init];

    std::vector<fit::DeveloperField> fit_developerFields = _message->GetDeveloperFields();

    for(std::vector<fit::DeveloperField>::iterator it = fit_developerFields.begin(); it != fit_developerFields.end(); ++it) {
        FITFieldDescriptionMesg* description = [[FITFieldDescriptionMesg alloc] initWithFitMesg:(fit::Mesg*)&it->GetDefinition().GetDescription()];
        FITDeveloperDataIdMesg* developer = [[FITDeveloperDataIdMesg alloc] initWithFitMesg:(fit::Mesg*)&it->GetDefinition().GetDeveloper()];
        FITDeveloperField* developerField = [[FITDeveloperField alloc] initWithFieldDescriptionMesg:description andDeveloperDataIdMesg: developer];
        [developerFields addObject:developerField];

        for(int i=0;i<it->GetNumValues();i++) {
            [developerField addValue:[NSNumber numberWithDouble:it->GetFLOAT64Value(i)] forIndex:i];
        }
    }

    return [developerFields copy];
}

-(FITEnum)getFieldENUMValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITEnumInvalid;
    }
    return _message->GetFieldENUMValue(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITByte)getFieldBYTEValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITByteInvalid;
    }
    return _message->GetFieldBYTEValue(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITSInt8)getFieldSINT8ValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITSInt8Invalid;
    }
    return _message->GetFieldSINT8Value(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITUInt8)getFieldUINT8ValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITUInt8Invalid;
    }
    return _message->GetFieldUINT8Value(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITUInt8z)getFieldUINT8ZValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITUInt8zInvalid;
    }
    return _message->GetFieldUINT8ZValue(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITSInt16)getFieldSINT16ValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITSInt16Invalid;
    }
    return _message->GetFieldSINT16Value(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITUInt16)getFieldUINT16ValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITUInt16Invalid;
    }
    return _message->GetFieldUINT16Value(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITUInt16z)getFieldUINT16ZValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITUInt16zInvalid;
    }
    return _message->GetFieldUINT16ZValue(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITSInt32)getFieldSINT32ValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITSInt32Invalid;
    }
    return _message->GetFieldSINT32Value(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITUInt32)getFieldUINT32ValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITUInt32Invalid;
    }
    return _message->GetFieldUINT32Value(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITUInt32z)getFieldUINT32ZValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITUInt32zInvalid;
    }
    return _message->GetFieldUINT32ZValue(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITSInt64)getFieldSINT64ValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITSInt64Invalid;
    }
    return _message->GetFieldSINT64Value(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITUInt64)getFieldUINT64ValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITUInt64Invalid;
    }
    return _message->GetFieldUINT64Value(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITUInt64z)getFieldUINT64ZValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITUInt64zInvalid;
    }
    return _message->GetFieldUINT64ZValue(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITFloat32)getFieldFLOAT32ValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITFloat32Invalid;
    }
    return _message->GetFieldFLOAT32Value(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(FITFloat64)getFieldFLOAT64ValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message == nil){
        return FITFloat64Invalid;
    }
    return _message->GetFieldFLOAT64Value(fieldNum,fieldArrayIndex,subFieldIndex);
}

-(NSString *)getFieldSTRINGValueForField:(FITUInt8)fieldNum forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message) {
        return StringFromFITString(_message->GetFieldSTRINGValue(fieldNum,fieldArrayIndex,subFieldIndex));
    }
    return nil;
}

-(void)setFieldENUMValueForField:(FITUInt8)fieldNum andValue:(FITEnum)value forIndex:(uint8_t)fieldArrayIndex andSubFieldIndex:(FITUInt16) subFieldIndex {
    if(_message) {
        _message->SetFieldENUMValue(fieldNum, value,fieldArrayIndex,subFieldIndex);
    }
}

-(void) setFieldBYTEValueForField: (FITUInt8) fieldNum andValue: (FITByte) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldBYTEValue(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

- (void) setFieldSINT8ValueForField: (FITUInt8) fieldNum andValue: (FITSInt8) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldSINT8Value(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void) setFieldUINT8ValueForField: (FITUInt8) fieldNum andValue: (FITUInt8) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldUINT8Value(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void) setFieldUINT8ZValueForField: (FITUInt8) fieldNum andValue: (FITUInt8z) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldUINT8ZValue(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void) setFieldSINT16ValueForField: (FITUInt8) fieldNum andValue: (FITSInt16) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldSINT16Value(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void) setFieldUINT16ValueForField: (FITUInt8) fieldNum andValue: (FITUInt16) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldUINT16Value(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void) setFieldUINT16ZValueForField: (FITUInt8) fieldNum andValue: (FITUInt16z) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldUINT16ZValue(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void) setFieldSINT32ValueForField: (FITUInt8) fieldNum andValue: (FITSInt32) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldSINT32Value(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}
-(void) setFieldUINT32ValueForField: (FITUInt8) fieldNum andValue: (FITUInt32) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldUINT32Value(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void) setFieldUINT32ZValueForField: (FITUInt8) fieldNum andValue: (FITUInt32z) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldUINT32ZValue(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void) setFieldSINT64ValueForField: (FITUInt8) fieldNum andValue: (FITSInt64) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldSINT64Value(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void) setFieldUINT64ValueForField: (FITUInt8) fieldNum andValue: (FITUInt64) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldUINT64Value(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void) setFieldUINT64ZValueForField: (FITUInt8) fieldNum andValue: (FITUInt64z) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldUINT64ZValue(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void) setFieldFLOAT32ValueForField: (FITUInt8) fieldNum andValue: (FITFloat32) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldFLOAT32Value(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void) setFieldFLOAT64ValueForField: (FITUInt8) fieldNum andValue: (FITFloat64) value forIndex: (uint8_t) fieldArrayIndex andSubFieldIndex: (FITUInt16) subFieldIndex {
    if (_message) {
        _message->SetFieldFLOAT64Value(fieldNum, value, fieldArrayIndex, subFieldIndex);
    }
}

-(void)setFieldSTRINGValueForField:(FITUInt8)fieldNum andValue:(NSString *)value forIndex:(uint8_t)fieldArrayIndex {
    if (_message) {
        _message->SetFieldSTRINGValue(fieldNum, FITStringFromString(value), 0);
    }
}

@end
