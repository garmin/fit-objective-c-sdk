/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2022 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.94Release
// Tag = production/akw/21.94.00-0-g0f668193
/////////////////////////////////////////////////////////////////////////////////////////////


#import "FITMessage+Internal.h"


#import "FITMesgCapabilitiesMesg.h"

@implementation FITMesgCapabilitiesMesg

- (instancetype)init {
    self = [super initWithFitMesgIndex:fit::Profile::MESG_MESG_CAPABILITIES];

    return self;
}

// MessageIndex 
- (BOOL)isMessageIndexValid {
	const fit::Field* field = [super getField:254];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITMessageIndex)getMessageIndex {
    return ([super getFieldUINT16ValueForField:254 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMessageIndex:(FITMessageIndex)messageIndex {
    [super setFieldUINT16ValueForField:254 andValue:(messageIndex) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// File 
- (BOOL)isFileValid {
	const fit::Field* field = [super getField:0];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITFile)getFile {
    return ([super getFieldENUMValueForField:0 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setFile:(FITFile)file {
    [super setFieldENUMValueForField:0 andValue:(file) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// MesgNum 
- (BOOL)isMesgNumValid {
	const fit::Field* field = [super getField:1];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITMesgNum)getMesgNum {
    return ([super getFieldUINT16ValueForField:1 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setMesgNum:(FITMesgNum)mesgNum {
    [super setFieldUINT16ValueForField:1 andValue:(mesgNum) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// CountType 
- (BOOL)isCountTypeValid {
	const fit::Field* field = [super getField:2];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITMesgCount)getCountType {
    return ([super getFieldENUMValueForField:2 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCountType:(FITMesgCount)countType {
    [super setFieldENUMValueForField:2 andValue:(countType) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 

// Count 
- (BOOL)isCountValid {
	const fit::Field* field = [super getField:3];
	if( FIT_NULL == field ) {
		return FALSE;
	}

	return field->IsValueValid() == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getCount {
    return ([super getFieldUINT16ValueForField:3 forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD]);
}

- (void)setCount:(FITUInt16)count {
    [super setFieldUINT16ValueForField:3 andValue:(count) forIndex:0 andSubFieldIndex:FIT_SUBFIELD_INDEX_MAIN_FIELD];
} 
// Count - Sub Fields
// NumPerFile - Count Field - Sub Field 
- (BOOL)isNumPerFileValid
{
    const fit::Field* field = [super getField:3];
    if( FIT_NULL == field ) {
        return FIT_FALSE;
    }

    if(![super canField:3 supportSubField:(FITUInt16)FITMesgCapabilitiesMesgCountFieldNumPerFileSubField]) {
        return FIT_FALSE;
    }

    return field->IsValueValid(0, FITMesgCapabilitiesMesgCountFieldNumPerFileSubField) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getNumPerFile
{
    return ([super getFieldUINT16ValueForField:3 forIndex:0 andSubFieldIndex:FITMesgCapabilitiesMesgCountFieldNumPerFileSubField]);
}

- (void)setNumPerFile:(FITUInt16)numPerFile
{
    [super setFieldUINT16ValueForField:3 andValue:(numPerFile) forIndex:0 andSubFieldIndex:FITMesgCapabilitiesMesgCountFieldNumPerFileSubField];
} 
// MaxPerFile - Count Field - Sub Field 
- (BOOL)isMaxPerFileValid
{
    const fit::Field* field = [super getField:3];
    if( FIT_NULL == field ) {
        return FIT_FALSE;
    }

    if(![super canField:3 supportSubField:(FITUInt16)FITMesgCapabilitiesMesgCountFieldMaxPerFileSubField]) {
        return FIT_FALSE;
    }

    return field->IsValueValid(0, FITMesgCapabilitiesMesgCountFieldMaxPerFileSubField) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getMaxPerFile
{
    return ([super getFieldUINT16ValueForField:3 forIndex:0 andSubFieldIndex:FITMesgCapabilitiesMesgCountFieldMaxPerFileSubField]);
}

- (void)setMaxPerFile:(FITUInt16)maxPerFile
{
    [super setFieldUINT16ValueForField:3 andValue:(maxPerFile) forIndex:0 andSubFieldIndex:FITMesgCapabilitiesMesgCountFieldMaxPerFileSubField];
} 
// MaxPerFileType - Count Field - Sub Field 
- (BOOL)isMaxPerFileTypeValid
{
    const fit::Field* field = [super getField:3];
    if( FIT_NULL == field ) {
        return FIT_FALSE;
    }

    if(![super canField:3 supportSubField:(FITUInt16)FITMesgCapabilitiesMesgCountFieldMaxPerFileTypeSubField]) {
        return FIT_FALSE;
    }

    return field->IsValueValid(0, FITMesgCapabilitiesMesgCountFieldMaxPerFileTypeSubField) == FIT_TRUE ? TRUE : FALSE;
}

- (FITUInt16)getMaxPerFileType
{
    return ([super getFieldUINT16ValueForField:3 forIndex:0 andSubFieldIndex:FITMesgCapabilitiesMesgCountFieldMaxPerFileTypeSubField]);
}

- (void)setMaxPerFileType:(FITUInt16)maxPerFileType
{
    [super setFieldUINT16ValueForField:3 andValue:(maxPerFileType) forIndex:0 andSubFieldIndex:FITMesgCapabilitiesMesgCountFieldMaxPerFileTypeSubField];
} 

@end
